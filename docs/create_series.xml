<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Linghao Wang</title>
<link>https://waterking.cc/create_series.html</link>
<atom:link href="https://waterking.cc/create_series.xml" rel="self" type="application/rss+xml"/>
<description></description>
<generator>quarto-1.2.280</generator>
<lastBuildDate>Thu, 26 Jan 2023 16:00:00 GMT</lastBuildDate>
<item>
  <title>Machine Learning Engineer (Ads) Interview Questions</title>
  <link>https://waterking.cc/posts/tutorials/mle-interview/summary.html</link>
  <description><![CDATA[ 



<div class="callout-tip callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Take-away
</div>
</div>
<div class="callout-body-container callout-body">
<p>本项目试图将所有广告算法岗可能会出现的问题囊括其中</p>
<p>面试题类型：</p>
<ol type="1">
<li><p>Leetcode300</p></li>
<li><p>ML/DL八股</p></li>
<li><p>数学题、智力题</p></li>
<li><p>场景题</p></li>
</ol>
</div>
</div>
<section id="机器学习" class="level2" data-number="1">
<h2 data-number="1" class="anchored" data-anchor-id="机器学习"><span class="header-section-number">1</span> 机器学习</h2>
<table class="table">
<tbody>
<tr class="odd">
<td><a href="../../../posts/tutorials/mle-interview/ml/lr.html">线性回归</a></td>
<td><a href="../../../posts/tutorials/mle-interview/ml/lr.html">LR</a></td>
<td><a href="../../../posts/tutorials/mle-interview/ml/svm.html">SVM</a></td>
<td><a href="../../../posts/tutorials/mle-interview/ml/tree.html">5个树模型</a></td>
<td><a href="../../../posts/tutorials/mle-interview/ml/无监督学习.html">无监督学习-聚类和PCA</a></td>
</tr>
<tr class="even">
<td><a href="../../../posts/tutorials/mle-interview/ml/特征工程.html">特征工程</a></td>
<td><a href="../../../posts/tutorials/mle-interview/ml/评价指标.html">评价指标</a></td>
<td><a href="../../../posts/tutorials/mle-interview/ml/拟合.html">过拟合、欠拟合-</a></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
</section>
<section id="深度学习" class="level2" data-number="2">
<h2 data-number="2" class="anchored" data-anchor-id="深度学习"><span class="header-section-number">2</span> 深度学习</h2>
<table class="table">
<tbody>
<tr class="odd">
<td><a href="../../../posts/tutorials/mle-interview/dl/NLP.html">NLP模型</a></td>
<td><a href="../../../posts/tutorials/mle-interview/dl/Ads.html"><strong>广告模型</strong></a></td>
<td><a href="../../../posts/tutorials/mle-interview/dl/优化器.html"><strong>优化器</strong></a></td>
<td><a href="../../../posts/tutorials/mle-interview/dl/loss.html"><strong>损失函数</strong>-</a></td>
<td><a href="../../../posts/tutorials/mle-interview/dl/activation.html">激活函数-</a></td>
</tr>
<tr class="even">
<td><a href="../../../posts/tutorials/mle-interview/dl/权重初始化.html">权重初始化-</a></td>
<td><a href="../../../posts/tutorials/mle-interview/dl/lr.html">学习率调整策略-</a></td>
<td><a href="">超参数调优</a></td>
<td><a href="../../../posts/tutorials/mle-interview/dl/Batchnorm.html">BatchNorm-</a></td>
<td><a href="../../../posts/tutorials/mle-interview/dl/grad.html">梯度消失、梯度爆炸-</a></td>
</tr>
<tr class="odd">
<td><a href="../../../posts/tutorials/mle-interview/dl/项目.html"><strong>项目</strong></a></td>
<td><a href="../../../posts/tutorials/mle-interview/dl/pytorch.html">Pytorch-</a></td>
<td><a href="../../../posts/tutorials/mle-interview/dl/tensorflow.html">Tensorflow</a></td>
<td><a href="../../../posts/tutorials/mle-interview/dl/度量学习.html">相似度度量-</a></td>
<td></td>
</tr>
</tbody>
</table>
</section>
<section id="基础知识" class="level2" data-number="3">
<h2 data-number="3" class="anchored" data-anchor-id="基础知识"><span class="header-section-number">3</span> 基础知识</h2>
<table class="table">
<tbody>
<tr class="odd">
<td><a href="../../../posts/tutorials/mle-interview/others/性格测试.html">性格测试</a></td>
<td><a href="../../../posts/tutorials/mle-interview/others/Leetcode.html"><strong>Leetcode</strong></a></td>
<td><a href="../../../posts/tutorials/mle-interview/others/basics.html">计算机基础</a></td>
<td><a href="../../../posts/tutorials/mle-interview/others/概率论.html">数学题、智力题-</a></td>
<td><a href="../../../posts/tutorials/mle-interview/others/业务知识.html">场景题</a></td>
</tr>
</tbody>
</table>


</section>

 ]]></description>
  <category>tutorial</category>
  <guid>https://waterking.cc/posts/tutorials/mle-interview/summary.html</guid>
  <pubDate>Thu, 26 Jan 2023 16:00:00 GMT</pubDate>
</item>
<item>
  <title>Model Deployment and Compression</title>
  <link>https://waterking.cc/posts/tools/infer-engines/infer-engines.html</link>
  <description><![CDATA[ 



<div class="{fig-vis}">
<p><img src="https://waterking.cc/posts/tools/infer-engines/MDLBench.png" class="img-fluid" style="width:100.0%"></p>
</div>
<!--
# Tool List for Model Deployment

## DL Framework List for Server
- TensorRT: Nvidia, for GPU
- OpenVino: Intel, for CPU
- ONNX: Microsoft, Amazon, and others

## DL Framework List for Mobile 
- ncnn/TNN: Tencent
- MNN: Alibaba
- MACE: Xiaomi
- Tengine: Open AI Lab
- Paddle-Lite: Baidu

## DL Inference Server
- Triton: Nvidia

## DL Deployment Tool
- FastDeploy: Nvidia
-->
<section id="model-deployment-tensorrt-triton-ncnn" class="level2" data-number="1">
<h2 data-number="1" class="anchored" data-anchor-id="model-deployment-tensorrt-triton-ncnn"><span class="header-section-number">1</span> Model Deployment: TensorRT, Triton, NCNN</h2>
<div class="callout-tip callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Take away
</div>
</div>
<div class="callout-body-container callout-body">
<p>Start with Nvidia TensorRT and Triton for deployment on server, then learn NCNN for mobile deployment.</p>
</div>
</div>
<section id="why-tensorrt" class="level3" data-number="1.1">
<h3 data-number="1.1" class="anchored" data-anchor-id="why-tensorrt"><span class="header-section-number">1.1</span> Why TensorRT?</h3>
<p>NVIDIA TensorRT is a deep learning platform that optimizes neural network models and speeds up inference across GPU-accelerated platforms running in the data center and embedded devices.</p>
<div class="{fig-vis}">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://waterking.cc/posts/tools/infer-engines/TensorRT.jpg" class="img-fluid figure-img" style="width:100.0%"></p>
<p></p><figcaption class="figure-caption">Same model, 4x Faster &amp; 6x Smaller with TensorRT-FP16</figcaption><p></p>
</figure>
</div>
</div>
</section>
<section id="why-triton-server" class="level3" data-number="1.2">
<h3 data-number="1.2" class="anchored" data-anchor-id="why-triton-server"><span class="header-section-number">1.2</span> Why Triton Server?</h3>
<p>Triton enables teams to deploy any AI model from multiple deep learning and machine learning frameworks, including TensorRT, TensorFlow, PyTorch, ONNX.</p>
<div class="{fig-vis}">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://waterking.cc/posts/tools/infer-engines/Triton.jpg" class="img-fluid figure-img" style="width:100.0%"></p>
<p></p><figcaption class="figure-caption">4x QPS with TensorRT+Triton</figcaption><p></p>
</figure>
</div>
</div>
</section>
<section id="tensorrttriton-workflow" class="level3" data-number="1.3">
<h3 data-number="1.3" class="anchored" data-anchor-id="tensorrttriton-workflow"><span class="header-section-number">1.3</span> TensorRT+Triton Workflow</h3>
<div class="{fig-vis}">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://waterking.cc/posts/tools/infer-engines/workflow.png" class="img-fluid figure-img" style="width:100.0%"></p>
<p></p><figcaption class="figure-caption">Overall workflow for optimizing a model with TensorRT and serving with NVIDIA Triton</figcaption><p></p>
</figure>
</div>
</div>
</section>
<section id="ncnn-workflow" class="level3" data-number="1.4">
<h3 data-number="1.4" class="anchored" data-anchor-id="ncnn-workflow"><span class="header-section-number">1.4</span> <a href="https://github.com/Tencent/ncnn">NCNN</a> Workflow</h3>
</section>
</section>
<section id="model-compression-pruning-distillation-quantization-sparsity-nas" class="level2" data-number="2">
<h2 data-number="2" class="anchored" data-anchor-id="model-compression-pruning-distillation-quantization-sparsity-nas"><span class="header-section-number">2</span> Model Compression: Pruning, Distillation, Quantization, Sparsity, NAS</h2>
<div class="callout-tip callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Take away
</div>
</div>
<div class="callout-body-container callout-body">
<p>Start with pruning. Choose any other method depending on (1) task requirements and (2) hardware.</p>
</div>
</div>
<section id="pruning" class="level3" data-number="2.1">
<h3 data-number="2.1" class="anchored" data-anchor-id="pruning"><span class="header-section-number">2.1</span> Pruning</h3>
<p>Good generalization.</p>
<p><a href="https://nni.readthedocs.io/zh/stable/compression/overview.html">Check out an Microsoft Pytorch-based tool: Neural Network Intelligence (NNI).</a></p>
</section>
<section id="distillation" class="level3" data-number="2.2">
<h3 data-number="2.2" class="anchored" data-anchor-id="distillation"><span class="header-section-number">2.2</span> Distillation</h3>
<p>A large model T teaches a small model S and transfer S’s knowledge. Distillation is suitable for complicated tasks and small models.</p>
<p>It can be classified by different methods:</p>
<ul>
<li>Response-based</li>
<li>Feature-based</li>
<li>Relation-based</li>
</ul>
<p>or different strategies:</p>
<ul>
<li>online distillation</li>
<li>offline distillation</li>
<li>self distillation</li>
</ul>
<p>or different distillation algorithms:</p>
<ul>
<li>adversarial distillation</li>
<li>multi-teacher distillation</li>
<li>cross-modal distillation</li>
<li>graph-based distillation</li>
<li>attention-based distillation</li>
<li>data-free distillation</li>
<li>quatized Distillation</li>
<li>lifelong distillation</li>
<li>nas distillation</li>
</ul>
<div class="{fig-vis}">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://waterking.cc/posts/tools/infer-engines/distillation.png" class="img-fluid figure-img" style="width:100.0%"></p>
<p></p><figcaption class="figure-caption">The procedure.</figcaption><p></p>
</figure>
</div>
</div>
</section>
<section id="quantization" class="level3" data-number="2.3">
<h3 data-number="2.3" class="anchored" data-anchor-id="quantization"><span class="header-section-number">2.3</span> Quantization</h3>
<p>High requirements for specific hardware, e.g., Intel cpu.</p>
<p><a href="https://nni.readthedocs.io/zh/stable/compression/overview.html">Check out an Microsoft Pytorch-based tool: Neural Network Intelligence (NNI).</a></p>
</section>
<section id="sparsity" class="level3" data-number="2.4">
<h3 data-number="2.4" class="anchored" data-anchor-id="sparsity"><span class="header-section-number">2.4</span> Sparsity</h3>
<p>You can make some tensors to be 0, but depends on specific hardwares, e.g., 30xx GPU. <a href="https://github.com/NVIDIA/apex/tree/082f999a6e18a3d02306e27482cc7486dab71a50/apex/contrib/sparsity">Check out an Nvidia Pytorch-based tool: Automated SParsity (ASP).</a></p>
</section>
<section id="neural-architecture-search-nas" class="level3" data-number="2.5">
<h3 data-number="2.5" class="anchored" data-anchor-id="neural-architecture-search-nas"><span class="header-section-number">2.5</span> Neural Architecture Search (NAS)</h3>
<p>You can modify the DARTS model space and tasks to deploy NAS, mostly for models like MobileNet series. For example, you can use NAS to search the backbone, channel, depth, kernel size, resolution and other hyperparams of the model, but NAS requires super computing power because of the large searching space. This requirement welcomes big companies like Google and Facebook, but stops small labs and companies from NAS’s research. <a href="https://nni.readthedocs.io/zh/stable/tutorials/hello_nas.html">Check out an Microsoft Pytorch-based tool: Neural Network Intelligence (NNI).</a></p>
</section>
</section>
<section id="reference" class="level2" data-number="3">
<h2 data-number="3" class="anchored" data-anchor-id="reference"><span class="header-section-number">3</span> Reference</h2>
<ul>
<li><a href="https://blog.advance.ai/blog/accelerating-ai-deep-learning-models">Accelerating AI/Deep learning models using tensorRT &amp; triton inference</a></li>
<li><a href="https://developer.nvidia.com/blog/optimizing-and-serving-models-with-nvidia-tensorrt-and-nvidia-triton/">Optimizing and Serving Models with NVIDIA TensorRT and NVIDIA Triton</a></li>
<li><a href="https://arxiv.org/pdf/2202.06512.pdf">A Comprehensive Benchmark of Deep Learning Libraries on Mobile Devices (WWW 2022)</a></li>
<li><a href="https://www.mdnice.com/writing/3efb55c789e94c5599eb1a0d1bf05b82">训练好的深度学习模型是怎么部署的？</a> <a href="https://juejin.cn/post/7133391555854860318">边缘计算 | 在移动设备上部署深度学习模型的思路与注意点</a> <a href="https://oldpan.me/archives/ai-deploy-study-road-1">老潘的AI部署以及工业落地学习之路</a></li>
<li><a href="https://www.zhihu.com/question/357967490/answer/911735881">在实际工程应用中,剪枝, 蒸馏等模型压缩方法中的具体哪个算法部署简单且有效?</a></li>
<li><a href="https://github.com/Syencil/mobile-yolov5-pruning-distillation">mobilev2-yolov5s剪枝、蒸馏，支持ncnn，tensorRT部署。ultra-light but better performence！</a></li>
<li><a href="https://github.com/HobbitLong/RepDistiller">[ICLR 2020] Contrastive Representation Distillation (CRD), and benchmark of recent knowledge distillation methods</a></li>
<li><a href="https://www.zhihu.com/question/518810217/answer/2367413413">2022 年神经架构搜索的发展状况如何?</a></li>
<li><a href="https://blog.salesforceairesearch.com/benchmarking-tensorrt-inference-server/">Benchmarking Triton (TensorRT) Inference Server for Transformer Models</a></li>
<li><a href="https://www.reddit.com/r/MachineLearning/comments/i3knzb/d_what_pytorchs_model_serving_framework_are_you/">https://www.reddit.com/r/MachineLearning/comments/i3knzb/d_what_pytorchs_model_serving_framework_are_you/</a></li>
<li><a href="https://clear.ml/blog/increase-huggingface-triton-throughput-by-193/">How to Accelerate HuggingFace Throughput by 193%</a></li>
<li><a href="https://towardsdatascience.com/hugging-face-transformer-inference-under-1-millisecond-latency-e1be0057a51c">Hugging Face Transformer Inference Under 1 Millisecond Latency</a></li>
</ul>


</section>

 ]]></description>
  <category>tools</category>
  <guid>https://waterking.cc/posts/tools/infer-engines/infer-engines.html</guid>
  <pubDate>Mon, 23 Jan 2023 16:00:00 GMT</pubDate>
  <media:content url="https://waterking.cc/posts/tools/infer-engines/MDLBench.png" medium="image" type="image/png" height="114" width="144"/>
</item>
<item>
  <title>Pythonic Test</title>
  <link>https://waterking.cc/posts/arts/test/test.html</link>
  <description><![CDATA[ 



<div class="{fig-vis}">
<p><img src="https://waterking.cc/posts/arts/test/.png" class="img-fluid" style="width:100.0%"></p>
</div>
<section id="unit-test" class="level2" data-number="1">
<h2 data-number="1" class="anchored" data-anchor-id="unit-test"><span class="header-section-number">1</span> Unit Test</h2>
<section id="example" class="level3" data-number="1.1">
<h3 data-number="1.1" class="anchored" data-anchor-id="example"><span class="header-section-number">1.1</span> Example</h3>
<p>The purpose of unit test is to ensure the correctness of a code unit in a project. For example, when we write a function:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="kw" style="color: #003B4F;">def</span> add(x, y):</span>
<span id="cb1-2">    <span class="cf" style="color: #003B4F;">return</span> x <span class="op" style="color: #5E5E5E;">+</span> y</span></code></pre></div>
<p>We find the easiest way to avoid bugs is to write a unit test like:</p>
<pre><code>if __name__ == "__main__":
    assert add(1, 2) == 3
    assert add(1, -1) == 0</code></pre>
</section>
</section>
<section id="integration-test" class="level2" data-number="2">
<h2 data-number="2" class="anchored" data-anchor-id="integration-test"><span class="header-section-number">2</span> Integration Test</h2>
<section id="example-1" class="level3" data-number="2.1">
<h3 data-number="2.1" class="anchored" data-anchor-id="example-1"><span class="header-section-number">2.1</span> Example</h3>
<div class="{fig-vis}">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://waterking.cc/posts/arts/test/Integration-Testing.png" class="img-fluid figure-img" style="width:100.0%"></p>
<p></p><figcaption class="figure-caption">The connection between unit testing and intergration testing.</figcaption><p></p>
</figure>
</div>
</div>
<p>The purpose of integration test of testing is to expose defects in the interaction between these software modules when they are integrated. Here priority is to be given for the integrating links rather than the unit functions which are already tested.</p>
<p>For example, application has 2 modules say ‘Login Page’, ‘Mailbox’ and each of them is integrated logically. Here do not concentrate much on the Login Page testing as it’s already been done in Unit Testing. But check how it’s linked to the Mail Box Page.</p>
<table class="table">
<caption>Demonstration of an integration testing example</caption>
<colgroup>
<col style="width: 30%">
<col style="width: 20%">
<col style="width: 23%">
<col style="width: 26%">
</colgroup>
<thead>
<tr class="header">
<th>Test Case ID</th>
<th style="text-align: left;">Test Case Objective</th>
<th style="text-align: right;">Test Case Description</th>
<th style="text-align: center;">Expected Result</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>1</td>
<td style="text-align: left;">Check the interface link between the Login and Mailbox module</td>
<td style="text-align: right;">Enter login credentials and click on the Login button</td>
<td style="text-align: center;">To be directed to the Mail Box</td>
</tr>
</tbody>
</table>
</section>
<section id="methods" class="level3" data-number="2.2">
<h3 data-number="2.2" class="anchored" data-anchor-id="methods"><span class="header-section-number">2.2</span> Methods</h3>
<section id="big-bang-testing" class="level4">
<h4 class="anchored" data-anchor-id="big-bang-testing">Big Bang Testing</h4>
<p><strong>Big Bang Testing</strong> is an integration testing approach in which all the components or modules are integrated together at once and then tested as a unit. (pros: convenient for small systems)</p>
</section>
<section id="incremental-testing" class="level4">
<h4 class="anchored" data-anchor-id="incremental-testing">Incremental Testing</h4>
<p>In the <strong>Incremental Testing</strong> approach, testing is done by integrating two or more modules that are logically related to each other and then tested for proper functioning of the application. Then the other related modules are integrated incrementally and the process continues until all the logically related modules are integrated and tested successfully.</p>
</section>
</section>
<section id="guidelines-for-integration-testing" class="level3" data-number="2.3">
<h3 data-number="2.3" class="anchored" data-anchor-id="guidelines-for-integration-testing"><span class="header-section-number">2.3</span> Guidelines for Integration Testing</h3>
<ul>
<li>First, determine the Integration Test Strategy that could be adopted and later prepare the test cases and test data accordingly.</li>
<li>Study the Architecture design of the Application and identify the Critical Modules. These need to be tested on priority.</li>
<li>Study the Architecture design of the Application and identify the Critical Modules. These need to be tested on priority.</li>
<li>After the test cases, it’s the test data which plays the critical role.</li>
<li>Always have the mock data prepared, prior to executing. Do not select test data while executing the test cases.</li>
</ul>
</section>
</section>
<section id="tool-pytest" class="level2" data-number="3">
<h2 data-number="3" class="anchored" data-anchor-id="tool-pytest"><span class="header-section-number">3</span> Tool: Pytest</h2>
<p><a href="https://docs.pytest.org/en/7.2.x/">Docs</a> <a href="https://www.ondiek-elijah.me/blog/integration-testing-with-pytest">Nice Practice: Integration Testing With Pytest</a></p>
</section>
<section id="test-driven-development" class="level2" data-number="4">
<h2 data-number="4" class="anchored" data-anchor-id="test-driven-development"><span class="header-section-number">4</span> Test-Driven Development</h2>
<p>Always write the test examples before coding.</p>
<div class="{fig-vis}">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://waterking.cc/posts/arts/test/1.png" class="img-fluid figure-img" style="width:100.0%"></p>
<p></p><figcaption class="figure-caption">The process of test-driven development</figcaption><p></p>
</figure>
</div>
</div>


</section>

 ]]></description>
  <category>python</category>
  <category>test</category>
  <guid>https://waterking.cc/posts/arts/test/test.html</guid>
  <pubDate>Fri, 13 Jan 2023 16:00:00 GMT</pubDate>
  <media:content url="https://waterking.cc/posts/arts/test" medium="image"/>
</item>
<item>
  <title>Google Docs - Efficient for Collaborations</title>
  <link>https://waterking.cc/posts/tools/googledocs/googledocs.html</link>
  <description><![CDATA[ 



<div class="{fig-vis}">
<p><img src="https://waterking.cc/posts/tools/googledocs/test.jpeg" class="img-fluid" style="width:100.0%"></p>
</div>
<section id="google-docs" class="level2" data-number="1">
<h2 data-number="1" class="anchored" data-anchor-id="google-docs"><span class="header-section-number">1</span> Google Docs</h2>
<div class="{doc}">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://waterking.cc/posts/tools/googledocs/doc.jpg" class="img-fluid figure-img" style="width:100.0%"></p>
<p></p><figcaption class="figure-caption">My First Use of Google Docs and Surprise at these Purple functions</figcaption><p></p>
</figure>
</div>
</div>
<p>Remember to supercharge your Google Docs with add-ons!</p>
</section>
<section id="google-sheets" class="level2" data-number="2">
<h2 data-number="2" class="anchored" data-anchor-id="google-sheets"><span class="header-section-number">2</span> Google Sheets</h2>
<div class="{sheet}">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://waterking.cc/posts/tools/googledocs/sheet.jpeg" class="img-fluid figure-img" style="width:100.0%"></p>
<p></p><figcaption class="figure-caption">My First Use of Google Sheets and Surprise at these Purple functions</figcaption><p></p>
</figure>
</div>
</div>
</section>
<section id="google-slides" class="level2" data-number="3">
<h2 data-number="3" class="anchored" data-anchor-id="google-slides"><span class="header-section-number">3</span> Google Slides</h2>
<div class="{sheet}">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://waterking.cc/posts/tools/googledocs/slides.png" class="img-fluid figure-img" style="width:100.0%"></p>
<p></p><figcaption class="figure-caption">Easy to share and collaborate with other person</figcaption><p></p>
</figure>
</div>
</div>
</section>
<section id="google-forms" class="level2" data-number="4">
<h2 data-number="4" class="anchored" data-anchor-id="google-forms"><span class="header-section-number">4</span> Google Forms</h2>
<div class="{sheet}">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://waterking.cc/posts/tools/googledocs/form.jpeg" class="img-fluid figure-img" style="width:100.0%"></p>
<p></p><figcaption class="figure-caption">My First Use of Google Forms and Surprise at these Purple functions</figcaption><p></p>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://waterking.cc/posts/tools/googledocs/form2.jpeg" class="img-fluid figure-img" style="width:100.0%"></p>
<p></p><figcaption class="figure-caption">Lots of Functions designed for quiz</figcaption><p></p>
</figure>
</div>
</div>


</section>

 ]]></description>
  <category>tools</category>
  <category>soft skills</category>
  <guid>https://waterking.cc/posts/tools/googledocs/googledocs.html</guid>
  <pubDate>Mon, 12 Dec 2022 16:00:00 GMT</pubDate>
  <media:content url="https://waterking.cc/posts/tools/googledocs/test.jpeg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>PyFlink Tutorial</title>
  <link>https://waterking.cc/posts/tutorials/flink/flink.html</link>
  <description><![CDATA[ 



<div class="{fig-vis}">
<p><img src="https://waterking.cc/posts/tutorials/flink/test.png" class="img-fluid" style="width:100.0%"></p>
</div>
<p>This tutorial is a copy form <a href="https://github.com/uncleguanghui/pyflink_learn">pyflink_learn</a></p>
<section id="import-packages" class="level2 unnumbered">
<h2 class="unnumbered anchored" data-anchor-id="import-packages">Import Packages</h2>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;">import</span> os, shutil</span>
<span id="cb1-2"><span class="im" style="color: #00769E;">from</span> pyflink.table <span class="im" style="color: #00769E;">import</span> BatchTableEnvironment, StreamTableEnvironment, EnvironmentSettings</span>
<span id="cb1-3"><span class="im" style="color: #00769E;">from</span> pyflink.table.udf <span class="im" style="color: #00769E;">import</span> udf, ScalarFunction</span>
<span id="cb1-4"><span class="im" style="color: #00769E;">from</span> pyflink.table.descriptors <span class="im" style="color: #00769E;">import</span> OldCsv, Schema, FileSystem</span>
<span id="cb1-5"><span class="im" style="color: #00769E;">from</span> pyflink.table.window <span class="im" style="color: #00769E;">import</span> Slide</span>
<span id="cb1-6"><span class="im" style="color: #00769E;">import</span> random, numpy <span class="im" style="color: #00769E;">as</span> np</span>
<span id="cb1-7"><span class="im" style="color: #00769E;">from</span> json <span class="im" style="color: #00769E;">import</span> dumps</span>
<span id="cb1-8"><span class="im" style="color: #00769E;">from</span> time <span class="im" style="color: #00769E;">import</span> sleep</span>
<span id="cb1-9"><span class="im" style="color: #00769E;">from</span> faker <span class="im" style="color: #00769E;">import</span> Faker</span>
<span id="cb1-10"><span class="im" style="color: #00769E;">from</span> datatime <span class="im" style="color: #00769E;">import</span> datatime</span>
<span id="cb1-11"><span class="im" style="color: #00769E;">from</span> reprint <span class="im" style="color: #00769E;">import</span> out</span>
<span id="cb1-12"><span class="im" style="color: #00769E;">import</span> json</span>
<span id="cb1-13"><span class="im" style="color: #00769E;">from</span> kafka <span class="im" style="color: #00769E;">import</span> KafkaProducer, KafkaConsumer</span>
<span id="cb1-14"><span class="im" style="color: #00769E;">from</span> sklearn <span class="im" style="color: #00769E;">import</span> datasets</span>
<span id="cb1-15"><span class="im" style="color: #00769E;">import</span> redis, pickle, logging</span>
<span id="cb1-16"><span class="im" style="color: #00769E;">from</span> sklearn.linear_model <span class="im" style="color: #00769E;">import</span> SGDClassifier</span>
<span id="cb1-17"><span class="im" style="color: #00769E;">import</span> base64</span>
<span id="cb1-18"><span class="im" style="color: #00769E;">from</span> flask_cors <span class="im" style="color: #00769E;">import</span> CORS</span>
<span id="cb1-19"><span class="im" style="color: #00769E;">from</span> flask <span class="im" style="color: #00769E;">import</span> request, Flask, jsonify, render_template</span>
<span id="cb1-20"><span class="im" style="color: #00769E;">from</span> PIL <span class="im" style="color: #00769E;">import</span> Image</span>
<span id="cb1-21"><span class="im" style="color: #00769E;">from</span> svglib.svglib <span class="im" style="color: #00769E;">import</span> svg2rlg</span>
<span id="cb1-22"><span class="im" style="color: #00769E;">from</span> reportlib.graphics <span class="im" style="color: #00769E;">import</span> renderPM</span></code></pre></div>
</section>
<section id="blink-batch-processing-in-flink" class="level2" data-number="1">
<h2 data-number="1" class="anchored" data-anchor-id="blink-batch-processing-in-flink"><span class="header-section-number">1</span> Blink: Batch Processing in Flink</h2>
<div class="{fig-vis}">
<p><img src="https://waterking.cc/posts/tutorials/flink/image1.jpeg" class="img-fluid" style="width:100.0%"></p>
</div>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="co" style="color: #5E5E5E;"># 1. create a batch processing environment</span></span>
<span id="cb2-2">env_settings <span class="op" style="color: #5E5E5E;">=</span> EnvironmentSettings.new_instance().in_batch_mode().use_old_planner().build()</span>
<span id="cb2-3">t_env <span class="op" style="color: #5E5E5E;">=</span> BatchTableEnvironment.create(environment_settings<span class="op" style="color: #5E5E5E;">=</span>env_settings)</span>
<span id="cb2-4"></span>
<span id="cb2-5"><span class="co" style="color: #5E5E5E;"># 2. create source table from csv (or MySQL, Kafka, Hive, etc)</span></span>
<span id="cb2-6">dir_word <span class="op" style="color: #5E5E5E;">=</span> os.path.join(os.path.abspath(<span class="va" style="color: #111111;">__file__</span>), <span class="st" style="color: #20794D;">'word_csv'</span>)</span>
<span id="cb2-7">t_env.execute_sql(<span class="ss" style="color: #20794D;">f"""</span></span>
<span id="cb2-8"><span class="ss" style="color: #20794D;">    CREATE TABLE source (</span></span>
<span id="cb2-9"><span class="ss" style="color: #20794D;">        id BIGINT, -- ID</span></span>
<span id="cb2-10"><span class="ss" style="color: #20794D;">        word STRING, -- 单词</span></span>
<span id="cb2-11"><span class="ss" style="color: #20794D;">    ) WITH (</span></span>
<span id="cb2-12"><span class="ss" style="color: #20794D;">        'connector' = 'filesystem',</span></span>
<span id="cb2-13"><span class="ss" style="color: #20794D;">        'path' = 'file://</span><span class="sc" style="color: #5E5E5E;">{</span>dir_word<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">',</span></span>
<span id="cb2-14"><span class="ss" style="color: #20794D;">        'format' = 'csv',</span></span>
<span id="cb2-15"><span class="ss" style="color: #20794D;">    )</span></span>
<span id="cb2-16"><span class="ss" style="color: #20794D;">"""</span></span>
<span id="cb2-17">)</span>
<span id="cb2-18"></span>
<span id="cb2-19"><span class="co" style="color: #5E5E5E;"># 3. create sink table as result</span></span>
<span id="cb2-20">dir_result <span class="op" style="color: #5E5E5E;">=</span> os.path.join(os.path.abspath(<span class="va" style="color: #111111;">__file__</span>), <span class="st" style="color: #20794D;">'result'</span>)</span>
<span id="cb2-21"></span>
<span id="cb2-22"><span class="cf" style="color: #003B4F;">if</span> os.path.exists(dir_result): <span class="co" style="color: #5E5E5E;"># remove file</span></span>
<span id="cb2-23">    <span class="cf" style="color: #003B4F;">if</span> os.path.isfile(dir_result):</span>
<span id="cb2-24">        os.remove(dir_result)</span>
<span id="cb2-25">    <span class="cf" style="color: #003B4F;">else</span>:</span>
<span id="cb2-26">        shutil.rmtree(dir_result, <span class="va" style="color: #111111;">True</span>)</span>
<span id="cb2-27"></span>
<span id="cb2-28">t_env.execute_sql(<span class="ss" style="color: #20794D;">f"""</span></span>
<span id="cb2-29"><span class="ss" style="color: #20794D;">    CREATE TABLE sink (</span></span>
<span id="cb2-30"><span class="ss" style="color: #20794D;">        word STRING, -- 单词</span></span>
<span id="cb2-31"><span class="ss" style="color: #20794D;">        cnt BIGINT, -- 出现次数</span></span>
<span id="cb2-32"><span class="ss" style="color: #20794D;">    ) WITH (</span></span>
<span id="cb2-33"><span class="ss" style="color: #20794D;">        'connector' = 'filesystem',</span></span>
<span id="cb2-34"><span class="ss" style="color: #20794D;">        'path' = 'file://</span><span class="sc" style="color: #5E5E5E;">{</span>dir_result<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">',</span></span>
<span id="cb2-35"><span class="ss" style="color: #20794D;">        'format' = 'csv',</span></span>
<span id="cb2-36"><span class="ss" style="color: #20794D;">    )</span></span>
<span id="cb2-37"><span class="ss" style="color: #20794D;">"""</span></span>
<span id="cb2-38">)</span>
<span id="cb2-39"></span>
<span id="cb2-40"><span class="co" style="color: #5E5E5E;"># 4. Batch Process</span></span>
<span id="cb2-41">t_env.sql_query(<span class="st" style="color: #20794D;">"""</span></span>
<span id="cb2-42"><span class="st" style="color: #20794D;">    SELECT word, count(1) AS cnt</span></span>
<span id="cb2-43"><span class="st" style="color: #20794D;">    FROM source</span></span>
<span id="cb2-44"><span class="st" style="color: #20794D;">    GROUP BY word</span></span>
<span id="cb2-45"><span class="st" style="color: #20794D;">"""</span>).insert_into(<span class="st" style="color: #20794D;">'sink'</span>)</span>
<span id="cb2-46">t_env.execute(<span class="st" style="color: #20794D;">'t'</span>)</span></code></pre></div>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb3-1"><span class="ex" style="color: null;">flink</span> run <span class="at" style="color: #657422;">-m</span> localhost:8081 <span class="at" style="color: #657422;">-py</span> batch.py</span></code></pre></div>
</section>
<section id="customize-udf-functions-for-real-time-logging-system" class="level2" data-number="2">
<h2 data-number="2" class="anchored" data-anchor-id="customize-udf-functions-for-real-time-logging-system"><span class="header-section-number">2</span> Customize UDF Functions for Real-time Logging System</h2>
<div class="{fig-vis}">
<p><img src="https://waterking.cc/posts/tutorials/flink/image2.jpeg" class="img-fluid" style="width:100.0%"></p>
</div>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb4-1"><span class="co" style="color: #5E5E5E;"># download dependencies</span></span>
<span id="cb4-2"><span class="ex" style="color: null;">pip</span> download <span class="at" style="color: #657422;">-d</span> cached_dir <span class="at" style="color: #657422;">-r</span> requirements.txt <span class="at" style="color: #657422;">--no-binary</span> :all:</span></code></pre></div>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="co" style="color: #5E5E5E;"># 1. create batch process environment</span></span>
<span id="cb5-2">env_settings <span class="op" style="color: #5E5E5E;">=</span> EnvironmentSettings.new_instance().in_batch_mode().use_blink_planner().build()</span>
<span id="cb5-3">t_env <span class="op" style="color: #5E5E5E;">=</span> BatchTableEnvironment.create(environment_settings)</span>
<span id="cb5-4">t_env.get_config().get_configuration().set_boolean(<span class="st" style="color: #20794D;">"python.fn-execution.memory.managed"</span>, <span class="va" style="color: #111111;">True</span>)</span>
<span id="cb5-5"></span>
<span id="cb5-6"><span class="co" style="color: #5E5E5E;"># 2. install third-party libraries from downloaded files</span></span>
<span id="cb5-7">t_env.set_python_requirements(<span class="st" style="color: #20794D;">"requirements.txt"</span>, <span class="st" style="color: #20794D;">"cached_dir"</span>)</span>
<span id="cb5-8"></span>
<span id="cb5-9"><span class="co" style="color: #5E5E5E;"># 3. create source table from data sources</span></span>
<span id="cb5-10">dir_log <span class="op" style="color: #5E5E5E;">=</span> os.path.join(os.path.abspath(<span class="va" style="color: #111111;">__file__</span>), <span class="st" style="color: #20794D;">'syslog.txt'</span>)</span>
<span id="cb5-11">t_env.<span class="ex" style="color: null;">connect</span>(FileSystem().path.(dir_log)) <span class="op" style="color: #5E5E5E;">\</span></span>
<span id="cb5-12">    .with_format(OldCsv()</span>
<span id="cb5-13">                .line_delimiter(<span class="st" style="color: #20794D;">'</span><span class="ch" style="color: #20794D;">\n</span><span class="st" style="color: #20794D;">'</span>)</span>
<span id="cb5-14">                .field(<span class="st" style="color: #20794D;">'line'</span>, DataTypes.STRING()))<span class="op" style="color: #5E5E5E;">\</span></span>
<span id="cb5-15">    .with_schema(Schema()</span>
<span id="cb5-16">                .field(<span class="st" style="color: #20794D;">'line'</span>, DataTypes.STRING()))<span class="op" style="color: #5E5E5E;">\</span></span>
<span id="cb5-17">    .create_temporary_table(<span class="st" style="color: #20794D;">'source'</span>)</span>
<span id="cb5-18"></span>
<span id="cb5-19"><span class="co" style="color: #5E5E5E;"># 4. create sink table</span></span>
<span id="cb5-20">dir_result <span class="op" style="color: #5E5E5E;">=</span> os.path.join(os.path.abspath(<span class="va" style="color: #111111;">__file__</span>), <span class="st" style="color: #20794D;">'result'</span>)</span>
<span id="cb5-21"><span class="cf" style="color: #003B4F;">if</span> os.path.exists(dir_result):</span>
<span id="cb5-22">    <span class="cf" style="color: #003B4F;">if</span> os.path.isfile(dir_result):</span>
<span id="cb5-23">        os.remove(dir_result)</span>
<span id="cb5-24">    <span class="cf" style="color: #003B4F;">else</span>:</span>
<span id="cb5-25">        shutil.rmtree(dir_result)</span>
<span id="cb5-26">t_env.<span class="ex" style="color: null;">connect</span>(FileSystem().path(dir_result))\ </span>
<span id="cb5-27">    .with_format(OldCsv() <span class="co" style="color: #5E5E5E;"># define data format</span></span>
<span id="cb5-28">                .field(<span class="st" style="color: #20794D;">'topic'</span>, DataTypes.STRING()))</span>
<span id="cb5-29">    .with_schema(Schema() <span class="co" style="color: #5E5E5E;"># define table structures</span></span>
<span id="cb5-30">                .field(<span class="st" style="color: #20794D;">'topic'</span>, DataTypes.STRING()))</span>
<span id="cb5-31">    .create_temporary_table(<span class="st" style="color: #20794D;">'sink'</span>)</span>
<span id="cb5-32"></span>
<span id="cb5-33"><span class="co" style="color: #5E5E5E;"># 5. register UDF</span></span>
<span id="cb5-34"><span class="at" style="color: #657422;">@udf</span>(input_types<span class="op" style="color: #5E5E5E;">=</span>[DataTypes.STRING()], result_type<span class="op" style="color: #5E5E5E;">=</span>DataTypes.STRING())</span>
<span id="cb5-35"><span class="kw" style="color: #003B4F;">def</span> get_topic(line):</span>
<span id="cb5-36">    <span class="im" style="color: #00769E;">import</span> re</span>
<span id="cb5-37">    <span class="cf" style="color: #003B4F;">if</span> <span class="st" style="color: #20794D;">'IN='</span> <span class="kw" style="color: #003B4F;">in</span> line <span class="kw" style="color: #003B4F;">and</span> <span class="st" style="color: #20794D;">'OUT='</span> <span class="kw" style="color: #003B4F;">in</span> line <span class="kw" style="color: #003B4F;">and</span> <span class="st" style="color: #20794D;">'MAC='</span> <span class="kw" style="color: #003B4F;">in</span> line:</span>
<span id="cb5-38">        <span class="cf" style="color: #003B4F;">return</span> <span class="st" style="color: #20794D;">'syslog-iptables'</span></span>
<span id="cb5-39">    <span class="cf" style="color: #003B4F;">elif</span> <span class="st" style="color: #20794D;">'======================================='</span> <span class="kw" style="color: #003B4F;">in</span> line <span class="kw" style="color: #003B4F;">or</span> re.search(<span class="vs" style="color: #20794D;">r'localhost (.+?): \['</span>, line, re.M <span class="op" style="color: #5E5E5E;">|</span> re.I):</span>
<span id="cb5-40">        <span class="cf" style="color: #003B4F;">return</span> <span class="st" style="color: #20794D;">'syslog-user'</span></span>
<span id="cb5-41">    <span class="cf" style="color: #003B4F;">else</span> <span class="cf" style="color: #003B4F;">return</span> <span class="st" style="color: #20794D;">'syslog-system'</span></span>
<span id="cb5-42"></span>
<span id="cb5-43"><span class="co" style="color: #5E5E5E;"># so many regex ... </span></span>
<span id="cb5-44"></span>
<span id="cb5-45">t_env.register_function(<span class="st" style="color: #20794D;">'get_topic'</span>, get_topic)</span>
<span id="cb5-46"></span>
<span id="cb5-47"><span class="co" style="color: #5E5E5E;"># 6. Batch Processing</span></span>
<span id="cb5-48">t_env.from_path(<span class="st" style="color: #20794D;">'source'</span>)<span class="op" style="color: #5E5E5E;">\</span></span>
<span id="cb5-49">    .select(<span class="st" style="color: #20794D;">'line, get_topic(line) AS topic'</span>) <span class="op" style="color: #5E5E5E;">\</span></span>
<span id="cb5-50">    .select(<span class="st" style="color: #20794D;">'topic, '</span>)</span>
<span id="cb5-51">    .execute_insert(<span class="st" style="color: #20794D;">'sink'</span>)</span></code></pre></div>
</section>
<section id="real-time-sync-with-mysql" class="level2" data-number="3">
<h2 data-number="3" class="anchored" data-anchor-id="real-time-sync-with-mysql"><span class="header-section-number">3</span> Real-time Sync with MySQL</h2>
<div class="{fig-vis}">
<p><img src="https://waterking.cc/posts/tutorials/flink/image3.jpeg" class="img-fluid" style="width:100.0%"></p>
</div>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="co" style="color: #5E5E5E;"># 1. create Blink stream environment</span></span>
<span id="cb6-2">env_settings <span class="op" style="color: #5E5E5E;">=</span> EnvironmentSettings.new_instance().in_streaming_mode().use_blink_planner().build()</span>
<span id="cb6-3">t_env <span class="op" style="color: #5E5E5E;">=</span> StreamTableEnvironment.create(environment_settings<span class="op" style="color: #5E5E5E;">=</span>env_settings)</span>
<span id="cb6-4"></span>
<span id="cb6-5"><span class="co" style="color: #5E5E5E;"># 2. create jar dependencies</span></span>
<span id="cb6-6">jars<span class="op" style="color: #5E5E5E;">=</span>[]</span>
<span id="cb6-7"><span class="cf" style="color: #003B4F;">for</span> <span class="bu" style="color: null;">file</span> <span class="kw" style="color: #003B4F;">in</span> os.listdir(os.path.abspath(os.path.dirname(<span class="va" style="color: #111111;">__file__</span>))):</span>
<span id="cb6-8">    <span class="cf" style="color: #003B4F;">if</span> <span class="bu" style="color: null;">file</span>.endswith(<span class="st" style="color: #20794D;">'.jar'</span>):</span>
<span id="cb6-9">        jars.append(os.path.abspath(<span class="bu" style="color: null;">file</span>))</span>
<span id="cb6-10">str_jars<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">';'</span>.join([<span class="st" style="color: #20794D;">'file://'</span><span class="op" style="color: #5E5E5E;">+</span>jar <span class="cf" style="color: #003B4F;">for</span> jar <span class="kw" style="color: #003B4F;">in</span> jars])</span>
<span id="cb6-11">t_env.config().get_configuration().set_string(<span class="st" style="color: #20794D;">"pipeline_jars"</span>, str_jars)</span>
<span id="cb6-12"></span>
<span id="cb6-13"><span class="co" style="color: #5E5E5E;"># 3. create source table from MySQL</span></span>
<span id="cb6-14">t_env.execute_sql(<span class="ss" style="color: #20794D;">f"""</span></span>
<span id="cb6-15"><span class="ss" style="color: #20794D;">    CREATE TABLE source (</span></span>
<span id="cb6-16"><span class="ss" style="color: #20794D;">        id INT, -- ID</span></span>
<span id="cb6-17"><span class="ss" style="color: #20794D;">        name STRING, -- Name</span></span>
<span id="cb6-18"><span class="ss" style="color: #20794D;">    ) WITH (</span></span>
<span id="cb6-19"><span class="ss" style="color: #20794D;">        'connector' = 'mysql-cdc',</span></span>
<span id="cb6-20"><span class="ss" style="color: #20794D;">        'hostname' = '127.0.0.1',</span></span>
<span id="cb6-21"><span class="ss" style="color: #20794D;">        'port' = '3306',</span></span>
<span id="cb6-22"><span class="ss" style="color: #20794D;">        'database-name' = 'flink',</span></span>
<span id="cb6-23"><span class="ss" style="color: #20794D;">        'table-name' = 'case3',</span></span>
<span id="cb6-24"><span class="ss" style="color: #20794D;">        'username' = 'root',</span></span>
<span id="cb6-25"><span class="ss" style="color: #20794D;">        'password' = 'root',</span></span>
<span id="cb6-26"><span class="ss" style="color: #20794D;">    )</span></span>
<span id="cb6-27"><span class="ss" style="color: #20794D;">"""</span></span>
<span id="cb6-28">)</span>
<span id="cb6-29"><span class="co" style="color: #5E5E5E;"># check table</span></span>
<span id="cb6-30">t_env.from_path(<span class="st" style="color: #20794D;">'source'</span>).print_schema()</span>
<span id="cb6-31">t_env.from_path(<span class="st" style="color: #20794D;">'source'</span>).to_pandas()</span>
<span id="cb6-32"></span>
<span id="cb6-33"><span class="co" style="color: #5E5E5E;"># 4. create sink table</span></span>
<span id="cb6-34">t_env.execute_sql(<span class="ss" style="color: #20794D;">f"""</span></span>
<span id="cb6-35"><span class="ss" style="color: #20794D;">    CREATE TABLE sink (</span></span>
<span id="cb6-36"><span class="ss" style="color: #20794D;">        id INT, -- ID</span></span>
<span id="cb6-37"><span class="ss" style="color: #20794D;">        name STRING, -- Name</span></span>
<span id="cb6-38"><span class="ss" style="color: #20794D;">        PRIMARY KEY (id) NOT ENFORCED -- define primary key</span></span>
<span id="cb6-39"><span class="ss" style="color: #20794D;">    ) WITH (</span></span>
<span id="cb6-40"><span class="ss" style="color: #20794D;">        'connector' = 'jdbc',</span></span>
<span id="cb6-41"><span class="ss" style="color: #20794D;">        'url' = 'jdbc:mysql://127.0.0.1:3307/flink',</span></span>
<span id="cb6-42"><span class="ss" style="color: #20794D;">        'driver' = 'com.mysql.cj.jdbc.Driver',</span></span>
<span id="cb6-43"><span class="ss" style="color: #20794D;">        'table-name' = 'case3',</span></span>
<span id="cb6-44"><span class="ss" style="color: #20794D;">        'username' = 'root',</span></span>
<span id="cb6-45"><span class="ss" style="color: #20794D;">        'password' = 'root',</span></span>
<span id="cb6-46"><span class="ss" style="color: #20794D;">    )</span></span>
<span id="cb6-47"><span class="ss" style="color: #20794D;">"""</span>)</span>
<span id="cb6-48"></span>
<span id="cb6-49"><span class="co" style="color: #5E5E5E;"># 5. batch processing</span></span>
<span id="cb6-50">t_env.from_path(<span class="st" style="color: #20794D;">'source'</span>).insert_into(<span class="st" style="color: #20794D;">'sink'</span>)</span></code></pre></div>
</section>
<section id="real-time-ranking" class="level2" data-number="4">
<h2 data-number="4" class="anchored" data-anchor-id="real-time-ranking"><span class="header-section-number">4</span> Real-time Ranking</h2>
<div class="{fig-vis}">
<p><img src="https://waterking.cc/posts/tutorials/flink/image4.jpeg" class="img-fluid" style="width:100.0%"></p>
</div>
<section id="kafka-data-producer" class="level3" data-number="4.1">
<h3 data-number="4.1" class="anchored" data-anchor-id="kafka-data-producer"><span class="header-section-number">4.1</span> Kafka Data Producer</h3>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="co" style="color: #5E5E5E;"># setting</span></span>
<span id="cb7-2">seed<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">2020</span></span>
<span id="cb7-3">num_users<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">50</span></span>
<span id="cb7-4">max_msg_per_second<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">20</span></span>
<span id="cb7-5">run_seconds<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">3600</span></span>
<span id="cb7-6">topic<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'user_action'</span></span>
<span id="cb7-7">bootstrap_servers <span class="op" style="color: #5E5E5E;">=</span> [<span class="st" style="color: #20794D;">'localhost:9092'</span>]</span>
<span id="cb7-8">fake <span class="op" style="color: #5E5E5E;">=</span> Faker(locale<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'zh_CN'</span>)</span>
<span id="cb7-9">Faker.seed(seed)</span>
<span id="cb7-10">random.seed(seed)</span>
<span id="cb7-11"><span class="co" style="color: #5E5E5E;">#</span></span>
<span id="cb7-12"><span class="kw" style="color: #003B4F;">class</span> UserGroup:</span>
<span id="cb7-13">    <span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb7-14">        <span class="co" style="color: #5E5E5E;"># different user, different probability</span></span>
<span id="cb7-15">        <span class="va" style="color: #111111;">self</span>.users <span class="op" style="color: #5E5E5E;">=</span> [<span class="va" style="color: #111111;">self</span>.gen_male() <span class="cf" style="color: #003B4F;">if</span> random.random() <span class="op" style="color: #5E5E5E;">&lt;</span> <span class="fl" style="color: #AD0000;">0.6</span> <span class="cf" style="color: #003B4F;">else</span> <span class="va" style="color: #111111;">self</span>.gen_female() <span class="cf" style="color: #003B4F;">for</span> _ <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(num_users)]</span>
<span id="cb7-16">        prob <span class="op" style="color: #5E5E5E;">=</span> np.cumsum(np.random.uniform(<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">100</span>, num_users)) <span class="co" style="color: #5E5E5E;"># sum of probabilities</span></span>
<span id="cb7-17">        <span class="va" style="color: #111111;">self</span>.prob <span class="op" style="color: #5E5E5E;">=</span> prob<span class="op" style="color: #5E5E5E;">/</span>prob.<span class="bu" style="color: null;">max</span>() <span class="co" style="color: #5E5E5E;"># to 0 - 1</span></span>
<span id="cb7-18">    </span>
<span id="cb7-19">    <span class="at" style="color: #657422;">@staticmethod</span></span>
<span id="cb7-20">    <span class="kw" style="color: #003B4F;">def</span> gen_male():</span>
<span id="cb7-21">        <span class="cf" style="color: #003B4F;">return</span> {<span class="st" style="color: #20794D;">'name'</span>: fake.name_male(), <span class="st" style="color: #20794D;">'sex'</span>:<span class="st" style="color: #20794D;">'男'</span>}</span>
<span id="cb7-22"></span>
<span id="cb7-23">    <span class="at" style="color: #657422;">@staticmethod</span></span>
<span id="cb7-24">    <span class="kw" style="color: #003B4F;">def</span> gen_female():</span>
<span id="cb7-25">        <span class="cf" style="color: #003B4F;">return</span> {<span class="st" style="color: #20794D;">'name'</span>: fake.name_female(), <span class="st" style="color: #20794D;">'sex'</span>:<span class="st" style="color: #20794D;">'女'</span>}</span>
<span id="cb7-26"></span>
<span id="cb7-27">    <span class="kw" style="color: #003B4F;">def</span> get_user(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb7-28">        r <span class="op" style="color: #5E5E5E;">=</span> random.random()</span>
<span id="cb7-29">        index <span class="op" style="color: #5E5E5E;">=</span> np.searchsorted(<span class="va" style="color: #111111;">self</span>.prob, r) <span class="co" style="color: #5E5E5E;"># insert into sorted array, return index where self.prob[index-1]&lt;r&lt;self.prob[index]</span></span>
<span id="cb7-30">        <span class="cf" style="color: #003B4F;">return</span> <span class="va" style="color: #111111;">self</span>.users[index]</span>
<span id="cb7-31"></span>
<span id="cb7-32"><span class="kw" style="color: #003B4F;">def</span> write_data():</span>
<span id="cb7-33">    group <span class="op" style="color: #5E5E5E;">=</span> UserGroup()</span>
<span id="cb7-34">    start_time <span class="op" style="color: #5E5E5E;">=</span> datatime.now()</span>
<span id="cb7-35">    <span class="co" style="color: #5E5E5E;"># init producer</span></span>
<span id="cb7-36">    producer <span class="op" style="color: #5E5E5E;">=</span> KafkaProducer(</span>
<span id="cb7-37">        bootstrap_servers <span class="op" style="color: #5E5E5E;">=</span> bootstrap_servers,</span>
<span id="cb7-38">        value_serializer<span class="op" style="color: #5E5E5E;">=</span><span class="kw" style="color: #003B4F;">lambda</span> x: dumps(x).encode(<span class="st" style="color: #20794D;">'utf-8'</span>),</span>
<span id="cb7-39">    )</span>
<span id="cb7-40"></span>
<span id="cb7-41">    <span class="cf" style="color: #003B4F;">while</span> <span class="va" style="color: #111111;">True</span>:</span>
<span id="cb7-42">        now <span class="op" style="color: #5E5E5E;">=</span> datatime.now()</span>
<span id="cb7-43">        <span class="co" style="color: #5E5E5E;"># produce data to kafka</span></span>
<span id="cb7-44">        user <span class="op" style="color: #5E5E5E;">=</span> group.get_user()</span>
<span id="cb7-45">        cur_data <span class="op" style="color: #5E5E5E;">=</span> {</span>
<span id="cb7-46">            <span class="st" style="color: #20794D;">'ts'</span>: now.strftime(<span class="st" style="color: #20794D;">'%Y-%m-</span><span class="sc" style="color: #5E5E5E;">%d</span><span class="st" style="color: #20794D;"> %H:%M:%S'</span>),</span>
<span id="cb7-47">            <span class="st" style="color: #20794D;">'name'</span>: user[<span class="st" style="color: #20794D;">'name'</span>],</span>
<span id="cb7-48">            <span class="st" style="color: #20794D;">'sex'</span>: user[<span class="st" style="color: #20794D;">'sex'</span>],</span>
<span id="cb7-49">            <span class="st" style="color: #20794D;">'action'</span>: <span class="st" style="color: #20794D;">'click'</span> <span class="cf" style="color: #003B4F;">if</span> random.random() <span class="op" style="color: #5E5E5E;">&lt;</span> <span class="fl" style="color: #AD0000;">0.9</span> <span class="cf" style="color: #003B4F;">else</span> <span class="st" style="color: #20794D;">'scroll'</span>,</span>
<span id="cb7-50">            <span class="st" style="color: #20794D;">'is_delete'</span>: <span class="dv" style="color: #AD0000;">0</span> <span class="cf" style="color: #003B4F;">if</span> random.random() <span class="op" style="color: #5E5E5E;">&lt;</span> <span class="fl" style="color: #AD0000;">0.9</span> <span class="cf" style="color: #003B4F;">else</span> <span class="dv" style="color: #AD0000;">1</span>,</span>
<span id="cb7-51">        }</span>
<span id="cb7-52">        producer.send(topic, value<span class="op" style="color: #5E5E5E;">=</span>cur_data)</span>
<span id="cb7-53"></span>
<span id="cb7-54">        <span class="co" style="color: #5E5E5E;"># terminate when running time &gt; run_seconds</span></span>
<span id="cb7-55">        <span class="cf" style="color: #003B4F;">if</span> (now <span class="op" style="color: #5E5E5E;">-</span> start_time).seconds <span class="op" style="color: #5E5E5E;">&gt;</span> run_seconds:</span>
<span id="cb7-56">            <span class="cf" style="color: #003B4F;">break</span></span>
<span id="cb7-57"></span>
<span id="cb7-58">        sleep(<span class="dv" style="color: #AD0000;">1</span> <span class="op" style="color: #5E5E5E;">/</span> max_msg_per_second)</span></code></pre></div>
</section>
<section id="kafka-monitor" class="level3" data-number="4.2">
<h3 data-number="4.2" class="anchored" data-anchor-id="kafka-monitor"><span class="header-section-number">4.2</span> Kafka Monitor</h3>
<section id="source-table-monitor" class="level4">
<h4 class="anchored" data-anchor-id="source-table-monitor">Source Table Monitor</h4>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">topic <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'user_action'</span></span>
<span id="cb8-2">bootstrap_servers <span class="op" style="color: #5E5E5E;">=</span> [<span class="st" style="color: #20794D;">'localhost:9092'</span>]</span>
<span id="cb8-3">group_id <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'group7'</span></span>
<span id="cb8-4"></span>
<span id="cb8-5">consumer <span class="op" style="color: #5E5E5E;">=</span> KafkaConsumer(</span>
<span id="cb8-6">    topic,</span>
<span id="cb8-7">    group_id<span class="op" style="color: #5E5E5E;">=</span>group_id,</span>
<span id="cb8-8">    bootstrap_servers<span class="op" style="color: #5E5E5E;">=</span>bootstrap_servers,</span>
<span id="cb8-9">    auto_offset_reset<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'latest'</span></span>
<span id="cb8-10">)</span>
<span id="cb8-11"></span>
<span id="cb8-12"><span class="cf" style="color: #003B4F;">for</span> msg <span class="kw" style="color: #003B4F;">in</span> consumer:</span>
<span id="cb8-13">    <span class="bu" style="color: null;">print</span>(msg.value.decode(<span class="st" style="color: #20794D;">'utf-8'</span>).encode(<span class="st" style="color: #20794D;">'utf-8'</span>).decode(<span class="st" style="color: #20794D;">'unicode_escape'</span>))</span></code></pre></div>
</section>
<section id="sink-table-monitor" class="level4">
<h4 class="anchored" data-anchor-id="sink-table-monitor">Sink Table Monitor</h4>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">topic <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'click_rank'</span></span>
<span id="cb9-2">bootstrap_servers<span class="op" style="color: #5E5E5E;">=</span>[<span class="st" style="color: #20794D;">'localhost:9092'</span>]</span>
<span id="cb9-3">group_id <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'group7'</span></span>
<span id="cb9-4"></span>
<span id="cb9-5">consumer <span class="op" style="color: #5E5E5E;">=</span> KafkaConsumer(</span>
<span id="cb9-6">    topic,</span>
<span id="cb9-7">    group_id <span class="op" style="color: #5E5E5E;">=</span> group_id,</span>
<span id="cb9-8">    bootstrap_servers <span class="op" style="color: #5E5E5E;">=</span> bootstrap_servers,</span>
<span id="cb9-9">    auto_offset_reset<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'latest'</span>,</span>
<span id="cb9-10">)</span>
<span id="cb9-11"></span>
<span id="cb9-12"><span class="cf" style="color: #003B4F;">with</span> output(output_type<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'list'</span>, initial_len<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">22</span>, interval<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">0</span>) <span class="im" style="color: #00769E;">as</span> output_lines:</span>
<span id="cb9-13">    <span class="co" style="color: #5E5E5E;"># 5 men 5 women</span></span>
<span id="cb9-14">    output_lines[<span class="dv" style="color: #AD0000;">0</span>] <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'=== 男 ==='</span></span>
<span id="cb9-15">    output_lines[<span class="dv" style="color: #AD0000;">6</span>] <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'=== 女 ==='</span></span>
<span id="cb9-16">    <span class="cf" style="color: #003B4F;">for</span> msg <span class="kw" style="color: #003B4F;">in</span> consumer:</span>
<span id="cb9-17">        data <span class="op" style="color: #5E5E5E;">=</span> json.loads(msg.value)</span>
<span id="cb9-18">        start_index <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">1</span> <span class="cf" style="color: #003B4F;">if</span> data[<span class="st" style="color: #20794D;">'sex'</span>] <span class="op" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">'男'</span> <span class="cf" style="color: #003B4F;">else</span> <span class="dv" style="color: #AD0000;">7</span></span>
<span id="cb9-19">        rank <span class="op" style="color: #5E5E5E;">=</span> json.loads(<span class="st" style="color: #20794D;">'['</span> <span class="op" style="color: #5E5E5E;">+</span> data[<span class="st" style="color: #20794D;">'top10'</span>] <span class="op" style="color: #5E5E5E;">+</span> <span class="st" style="color: #20794D;">']'</span>)</span>
<span id="cb9-20"></span>
<span id="cb9-21">        <span class="cf" style="color: #003B4F;">for</span> i <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(<span class="dv" style="color: #AD0000;">5</span>):</span>
<span id="cb9-22">            index <span class="op" style="color: #5E5E5E;">=</span> start_index <span class="op" style="color: #5E5E5E;">+</span> i</span>
<span id="cb9-23">            <span class="cf" style="color: #003B4F;">if</span> i <span class="op" style="color: #5E5E5E;">&lt;</span> <span class="bu" style="color: null;">len</span>(rank):</span>
<span id="cb9-24">                name <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">list</span>(rank[i].keys())[<span class="dv" style="color: #AD0000;">0</span>]</span>
<span id="cb9-25">                value <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">list</span>(rank[i].values())[<span class="dv" style="color: #AD0000;">0</span>]</span>
<span id="cb9-26">                output_lines[index] <span class="op" style="color: #5E5E5E;">=</span> <span class="ss" style="color: #20794D;">f'</span><span class="sc" style="color: #5E5E5E;">{</span>name<span class="sc" style="color: #5E5E5E;">:6s}</span><span class="ss" style="color: #20794D;"> </span><span class="sc" style="color: #5E5E5E;">{</span>value<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">'</span></span>
<span id="cb9-27">            <span class="cf" style="color: #003B4F;">else</span>:</span>
<span id="cb9-28">                output_lines[index] <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">''</span></span></code></pre></div>
</section>
</section>
<section id="stream-processing" class="level3" data-number="4.3">
<h3 data-number="4.3" class="anchored" data-anchor-id="stream-processing"><span class="header-section-number">4.3</span> Stream Processing</h3>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="co" style="color: #5E5E5E;"># settings</span></span>
<span id="cb10-2">kafka_servers <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'localhost:9092'</span></span>
<span id="cb10-3">kafka_consumer_group_id <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'group8'</span></span>
<span id="cb10-4">source_topic <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'user_action'</span></span>
<span id="cb10-5">sink_topic <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'click_rank'</span></span>
<span id="cb10-6"></span>
<span id="cb10-7"><span class="co" style="color: #5E5E5E;"># 1. create Blink stream process environment</span></span>
<span id="cb10-8">env<span class="op" style="color: #5E5E5E;">=</span>StreamExecutionEnvironment.get_execution_environment()</span>
<span id="cb10-9">env_settings <span class="op" style="color: #5E5E5E;">=</span> EnvironmentSettings.new_instance().in_streaming_mode().use_blink_planner().build()</span>
<span id="cb10-10">t_env <span class="op" style="color: #5E5E5E;">=</span> StreamTableEnvironment.create(env, environment_settings<span class="op" style="color: #5E5E5E;">=</span>env_settings)</span>
<span id="cb10-11">t_env.get_config().get_configuration().set_boolean(<span class="st" style="color: #20794D;">'python.fn-execution.memory.managed'</span>, <span class="va" style="color: #111111;">True</span>)</span>
<span id="cb10-12"></span>
<span id="cb10-13"><span class="co" style="color: #5E5E5E;"># 2. add dependencies and register UDF</span></span>
<span id="cb10-14">dir_kafka_sql_connect <span class="op" style="color: #5E5E5E;">=</span> os.path.join(os.path.abspath(os.path.dirname(<span class="va" style="color: #111111;">__file__</span>)), <span class="st" style="color: #20794D;">'flink-sql-connector-kafka_2.11-1.11.2.jar'</span>)</span>
<span id="cb10-15">t_env.get_config().get_configuration().set_string(<span class="st" style="color: #20794D;">'pipeline.jars'</span>, <span class="st" style="color: #20794D;">'file://'</span> <span class="op" style="color: #5E5E5E;">+</span> dir_kafka_sql_connect)</span>
<span id="cb10-16"></span>
<span id="cb10-17">dir_java_udf <span class="op" style="color: #5E5E5E;">=</span> os.path.join(os.path.abspath(os.path.dirname(<span class="va" style="color: #111111;">__file__</span>)), <span class="st" style="color: #20794D;">'flink-udf-1.0-SNAPSHOT.jar'</span>)</span>
<span id="cb10-18">t_env.get_config().get_configuration().set_string(<span class="st" style="color: #20794D;">'pipeline.classpaths'</span>, <span class="st" style="color: #20794D;">'file://'</span> <span class="op" style="color: #5E5E5E;">+</span> dir_java_udf)</span>
<span id="cb10-19"></span>
<span id="cb10-20">t_env.register_java_function(<span class="st" style="color: #20794D;">'getTopN'</span>, <span class="st" style="color: #20794D;">'com.flink.udf.TopN'</span>)</span>
<span id="cb10-21"></span>
<span id="cb10-22"><span class="co" style="color: #5E5E5E;"># 3. create source table</span></span>
<span id="cb10-23">t_env.execute_sql(<span class="ss" style="color: #20794D;">f"""</span></span>
<span id="cb10-24"><span class="ss" style="color: #20794D;">    CREATE TABLE source (</span></span>
<span id="cb10-25"><span class="ss" style="color: #20794D;">        name VARCHAR,</span></span>
<span id="cb10-26"><span class="ss" style="color: #20794D;">        sex VARCHAR,</span></span>
<span id="cb10-27"><span class="ss" style="color: #20794D;">        action VARCHAR,</span></span>
<span id="cb10-28"><span class="ss" style="color: #20794D;">        is_delete BIGINT,</span></span>
<span id="cb10-29"><span class="ss" style="color: #20794D;">        ts TIMESTAMP(3),</span></span>
<span id="cb10-30"><span class="ss" style="color: #20794D;">        WATERMARK FOR ts AS ts - INTERVAL '5' SECOND</span></span>
<span id="cb10-31"><span class="ss" style="color: #20794D;">    ) with(</span></span>
<span id="cb10-32"><span class="ss" style="color: #20794D;">        'connector' = 'kafka',</span></span>
<span id="cb10-33"><span class="ss" style="color: #20794D;">        'topic' = '</span><span class="sc" style="color: #5E5E5E;">{</span>source_topic<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">',</span></span>
<span id="cb10-34"><span class="ss" style="color: #20794D;">        'properties.bootstrap.servers' = '</span><span class="sc" style="color: #5E5E5E;">{</span>kafka_servers<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">',</span></span>
<span id="cb10-35"><span class="ss" style="color: #20794D;">        'properties.group.id' = '</span><span class="sc" style="color: #5E5E5E;">{</span>kafka_consumer_group_id<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">',</span></span>
<span id="cb10-36"><span class="ss" style="color: #20794D;">        'scan.startup.mode' = 'latest-offset',</span></span>
<span id="cb10-37"><span class="ss" style="color: #20794D;">        'json.fail-on-missing-field' = 'false',</span></span>
<span id="cb10-38"><span class="ss" style="color: #20794D;">        'json.ignore-parse-errors' = 'true',</span></span>
<span id="cb10-39"><span class="ss" style="color: #20794D;">        'format' = 'json',</span></span>
<span id="cb10-40"><span class="ss" style="color: #20794D;">    )</span></span>
<span id="cb10-41"></span>
<span id="cb10-42"><span class="ss" style="color: #20794D;">"""</span>)</span>
<span id="cb10-43"></span>
<span id="cb10-44"><span class="co" style="color: #5E5E5E;"># 4. create sink table</span></span>
<span id="cb10-45">t_env.execute_sql(<span class="ss" style="color: #20794D;">f"""</span></span>
<span id="cb10-46"><span class="ss" style="color: #20794D;">    CREATE TABLE sink (</span></span>
<span id="cb10-47"><span class="ss" style="color: #20794D;">        sex STRING,</span></span>
<span id="cb10-48"><span class="ss" style="color: #20794D;">        top10 STRING,</span></span>
<span id="cb10-49"><span class="ss" style="color: #20794D;">        start_time TIMESTAMP(3),</span></span>
<span id="cb10-50"><span class="ss" style="color: #20794D;">        end_time TIMESTAMP(3),</span></span>
<span id="cb10-51"><span class="ss" style="color: #20794D;">    ) with(</span></span>
<span id="cb10-52"><span class="ss" style="color: #20794D;">        'connector' = 'kafka',</span></span>
<span id="cb10-53"><span class="ss" style="color: #20794D;">        'topic' = '</span><span class="sc" style="color: #5E5E5E;">{</span>sink_topic<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">',</span></span>
<span id="cb10-54"><span class="ss" style="color: #20794D;">        'properties.bootstrap.servers' = '</span><span class="sc" style="color: #5E5E5E;">{</span>kafka_servers<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">',</span></span>
<span id="cb10-55"><span class="ss" style="color: #20794D;">        'properties.group.id' = '</span><span class="sc" style="color: #5E5E5E;">{</span>kafka_consumer_group_id<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">',</span></span>
<span id="cb10-56"><span class="ss" style="color: #20794D;">        'scan.startup.mode' = 'latest-offset',</span></span>
<span id="cb10-57"><span class="ss" style="color: #20794D;">        'json.fail-on-missing-field' = 'false',</span></span>
<span id="cb10-58"><span class="ss" style="color: #20794D;">        'json.ignore-parse-errors' = 'true',</span></span>
<span id="cb10-59"><span class="ss" style="color: #20794D;">        'format' = 'json',</span></span>
<span id="cb10-60"><span class="ss" style="color: #20794D;">    )</span></span>
<span id="cb10-61"><span class="ss" style="color: #20794D;">"""</span>)</span>
<span id="cb10-62"></span>
<span id="cb10-63"><span class="co" style="color: #5E5E5E;"># 5. stream processing</span></span>
<span id="cb10-64"><span class="co" style="color: #5E5E5E;"># HOP is like rolling window(timestamp, step, window_length)</span></span>
<span id="cb10-65">t_env.sql_query(<span class="st" style="color: #20794D;">"""</span></span>
<span id="cb10-66"><span class="st" style="color: #20794D;">    SELECT </span></span>
<span id="cb10-67"><span class="st" style="color: #20794D;">        sex,</span></span>
<span id="cb10-68"><span class="st" style="color: #20794D;">        getTopN(name, 10, 1) AS top10,</span></span>
<span id="cb10-69"><span class="st" style="color: #20794D;">        HOP_START(ts, INTERVAL '1' SECOND, INTERVAL '60' SECOND) AS start_time,</span></span>
<span id="cb10-70"><span class="st" style="color: #20794D;">        HOP_END(ts, INTERVAL '1' SECOND, INTERVAL '60' SECOND) AS end_time</span></span>
<span id="cb10-71"><span class="st" style="color: #20794D;">    FROM</span></span>
<span id="cb10-72"><span class="st" style="color: #20794D;">        source</span></span>
<span id="cb10-73"><span class="st" style="color: #20794D;">    WHERE</span></span>
<span id="cb10-74"><span class="st" style="color: #20794D;">        action='click'</span></span>
<span id="cb10-75"><span class="st" style="color: #20794D;">        AND is_delete=0</span></span>
<span id="cb10-76"><span class="st" style="color: #20794D;">    GROUP BY </span></span>
<span id="cb10-77"><span class="st" style="color: #20794D;">        sex,</span></span>
<span id="cb10-78"><span class="st" style="color: #20794D;">        HOP(ts, INTERVAL '1' SECOND, INTERVAL '60' SECOND)</span></span>
<span id="cb10-79"><span class="st" style="color: #20794D;">"""</span>).insert_into(<span class="st" style="color: #20794D;">"sink"</span>)</span>
<span id="cb10-80">t_env.execute(<span class="st" style="color: #20794D;">'Top10 User Click'</span>)</span>
<span id="cb10-81"></span>
<span id="cb10-82"><span class="co" style="color: #5E5E5E;"># </span></span></code></pre></div>
</section>
</section>
<section id="online-machine-learning" class="level2" data-number="5">
<h2 data-number="5" class="anchored" data-anchor-id="online-machine-learning"><span class="header-section-number">5</span> Online Machine Learning</h2>
<div class="{fig-vis}">
<p><img src="https://waterking.cc/posts/tutorials/flink/image5.jpeg" class="img-fluid" style="width:100.0%"></p>
</div>
<section id="kafka-data-producer-1" class="level3" data-number="5.1">
<h3 data-number="5.1" class="anchored" data-anchor-id="kafka-data-producer-1"><span class="header-section-number">5.1</span> Kafka Data Producer</h3>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="co" style="color: #5E5E5E;"># settings</span></span>
<span id="cb11-2">max_msg_per_second <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">10</span></span>
<span id="cb11-3">topic <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'handwritten_digit'</span></span>
<span id="cb11-4">bootstrap_servers <span class="op" style="color: #5E5E5E;">=</span> [<span class="st" style="color: #20794D;">'localhost:9092'</span>]</span>
<span id="cb11-5"></span>
<span id="cb11-6"><span class="kw" style="color: #003B4F;">def</span> write_data():</span>
<span id="cb11-7">    digits <span class="op" style="color: #5E5E5E;">=</span> datasets.load_digits()</span>
<span id="cb11-8">    all_x <span class="op" style="color: #5E5E5E;">=</span> digits.data.astype(<span class="bu" style="color: null;">int</span>)</span>
<span id="cb11-9">    all_y <span class="op" style="color: #5E5E5E;">=</span> digits.target.astype(<span class="bu" style="color: null;">int</span>)</span>
<span id="cb11-10"></span>
<span id="cb11-11">    producer <span class="op" style="color: #5E5E5E;">=</span> KafkaProducer(</span>
<span id="cb11-12">        bootstrap_servers <span class="op" style="color: #5E5E5E;">=</span> bootstrap_servers,</span>
<span id="cb11-13">        value_serializer <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">lambda</span> x: dumps(x).encode(<span class="st" style="color: #20794D;">'utf-8'</span>)</span>
<span id="cb11-14">    )</span>
<span id="cb11-15"></span>
<span id="cb11-16">    <span class="cf" style="color: #003B4F;">while</span> <span class="va" style="color: #111111;">True</span>:</span>
<span id="cb11-17">        idx <span class="op" style="color: #5E5E5E;">=</span> np.arange(digits.data.shape[<span class="dv" style="color: #AD0000;">0</span>])</span>
<span id="cb11-18">        np.random.shuffle(idx)</span>
<span id="cb11-19">        all_x <span class="op" style="color: #5E5E5E;">=</span> all_x[idx]</span>
<span id="cb11-20">        all_y <span class="op" style="color: #5E5E5E;">=</span> all_y[idx]</span>
<span id="cb11-21"></span>
<span id="cb11-22">        <span class="cf" style="color: #003B4F;">for</span> x, y <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">zip</span>(all_x, all_y):</span>
<span id="cb11-23">            cur_data <span class="op" style="color: #5E5E5E;">=</span> {</span>
<span id="cb11-24">                <span class="st" style="color: #20794D;">'ts'</span>: datetime.now().strftime(<span class="st" style="color: #20794D;">'%Y-%m-</span><span class="sc" style="color: #5E5E5E;">%d</span><span class="st" style="color: #20794D;"> %H:%M:%S'</span>),</span>
<span id="cb11-25">                <span class="st" style="color: #20794D;">'x'</span>: x.tolist(),</span>
<span id="cb11-26">                <span class="st" style="color: #20794D;">'actual_y'</span>: <span class="bu" style="color: null;">int</span>(y)</span>
<span id="cb11-27">            }</span>
<span id="cb11-28">            producer.send(topic, value<span class="op" style="color: #5E5E5E;">=</span>cur_data)</span>
<span id="cb11-29"></span>
<span id="cb11-30">            sleep(<span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">/</span> max_msg_per_second)</span>
<span id="cb11-31"></span>
<span id="cb11-32">write_data()</span></code></pre></div>
</section>
<section id="kafka-data-consumer" class="level3" data-number="5.2">
<h3 data-number="5.2" class="anchored" data-anchor-id="kafka-data-consumer"><span class="header-section-number">5.2</span> Kafka Data Consumer</h3>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="co" style="color: #5E5E5E;"># 1. create Blink Stream Processing Environment</span></span>
<span id="cb12-2">env <span class="op" style="color: #5E5E5E;">=</span> StreamExecutionEnvironment.get_execution_environment()</span>
<span id="cb12-3">env_settings <span class="op" style="color: #5E5E5E;">=</span> EnvironmentSettings.new_instance().in_streaming_mode().use_blink_planner().build()</span>
<span id="cb12-4">t_env <span class="op" style="color: #5E5E5E;">=</span> StreamTableEnvironment.create(env, environment_settings<span class="op" style="color: #5E5E5E;">=</span>env_settings)</span>
<span id="cb12-5">t_env.get_config().get_configuration().set_boolean(<span class="st" style="color: #20794D;">'python.fn-execution.memory.managed'</span>, <span class="va" style="color: #111111;">True</span>)</span>
<span id="cb12-6"></span>
<span id="cb12-7"><span class="co" style="color: #5E5E5E;"># 2. Load Dependencies</span></span>
<span id="cb12-8">dir_kafka_sql_connect <span class="op" style="color: #5E5E5E;">=</span> os.path.join(os.path.abspath(os.path.dirname(<span class="va" style="color: #111111;">__file__</span>)), <span class="st" style="color: #20794D;">'flink-sql-connector-kafka_2.11-1.11.2.jar'</span>)</span>
<span id="cb12-9">t_env.get_config().get_configuration().set_string(<span class="st" style="color: #20794D;">'pipeline.jars'</span>, <span class="st" style="color: #20794D;">'file://'</span><span class="op" style="color: #5E5E5E;">+</span> dir_kafka_sql_connect)</span>
<span id="cb12-10"></span>
<span id="cb12-11">dir_requirements <span class="op" style="color: #5E5E5E;">=</span> os.path.join(os.path.abspath(os.path.dirname(<span class="va" style="color: #111111;">__file__</span>)), <span class="st" style="color: #20794D;">'requirements.txt'</span>)</span>
<span id="cb12-12">dir_cache <span class="op" style="color: #5E5E5E;">=</span> os.path.join(os.path.abspath(os.path.dirname(<span class="va" style="color: #111111;">__file__</span>)), <span class="st" style="color: #20794D;">'cached_dir'</span>)</span>
<span id="cb12-13"><span class="cf" style="color: #003B4F;">if</span> os.path.exists(dir_requirements):</span>
<span id="cb12-14">    <span class="cf" style="color: #003B4F;">if</span> os.path.exists(dir_cache):</span>
<span id="cb12-15">        t_env.set_python_requirements(dir_requirements, cached_dir)</span>
<span id="cb12-16"></span>
<span id="cb12-17"><span class="co" style="color: #5E5E5E;"># 3. register UDF</span></span>
<span id="cb12-18"><span class="kw" style="color: #003B4F;">class</span> Model(ScalarFunction):</span>
<span id="cb12-19">    <span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb12-20">        <span class="co" style="color: #5E5E5E;"># load model</span></span>
<span id="cb12-21">        <span class="va" style="color: #111111;">self</span>.model_name <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'online_ml_model'</span></span>
<span id="cb12-22">        <span class="va" style="color: #111111;">self</span>.redis_params <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">dict</span>(host<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'localhost'</span>, password<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'redis_password'</span>, port<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'6379'</span>, db<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">0</span>)</span>
<span id="cb12-23">        <span class="va" style="color: #111111;">self</span>.clf <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.load_model()</span>
<span id="cb12-24"></span>
<span id="cb12-25">        <span class="va" style="color: #111111;">self</span>.interval_dump_seconds <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">30</span></span>
<span id="cb12-26">        <span class="va" style="color: #111111;">self</span>.last_dump_time <span class="op" style="color: #5E5E5E;">=</span> datetime.now()</span>
<span id="cb12-27"></span>
<span id="cb12-28">        <span class="va" style="color: #111111;">self</span>.classes <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">list</span>(<span class="bu" style="color: null;">range</span>(<span class="dv" style="color: #AD0000;">10</span>))</span>
<span id="cb12-29"></span>
<span id="cb12-30">        <span class="va" style="color: #111111;">self</span>.metric_counter<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">None</span></span>
<span id="cb12-31">        <span class="va" style="color: #111111;">self</span>.metric_predict_acc <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span></span>
<span id="cb12-32">        <span class="va" style="color: #111111;">self</span>.metric_distribution_y <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">None</span></span>
<span id="cb12-33">        <span class="va" style="color: #111111;">self</span>.metric_total_10_sec <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">None</span></span>
<span id="cb12-34">        <span class="va" style="color: #111111;">self</span>.metric_right_10_sec <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">None</span></span>
<span id="cb12-35">    </span>
<span id="cb12-36">    <span class="kw" style="color: #003B4F;">def</span> <span class="bu" style="color: null;">open</span>(<span class="va" style="color: #111111;">self</span>, function_context):</span>
<span id="cb12-37">        <span class="co" style="color: #5E5E5E;"># register metrics</span></span>
<span id="cb12-38">        metric_group <span class="op" style="color: #5E5E5E;">=</span> function_context.get_metric_group().add_group(<span class="st" style="color: #20794D;">'online_ml'</span>)</span>
<span id="cb12-39">        <span class="va" style="color: #111111;">self</span>.metric_counter <span class="op" style="color: #5E5E5E;">=</span> metric_group.counter(<span class="st" style="color: #20794D;">'sample_count'</span>)</span>
<span id="cb12-40">        metric_group.gauge(<span class="st" style="color: #20794D;">'prediction_acc'</span>, <span class="kw" style="color: #003B4F;">lambda</span>: <span class="bu" style="color: null;">int</span>(<span class="va" style="color: #111111;">self</span>.metric_predict_acc<span class="op" style="color: #5E5E5E;">*</span><span class="dv" style="color: #AD0000;">100</span>))</span>
<span id="cb12-41">        <span class="va" style="color: #111111;">self</span>.metric_distribution_y <span class="op" style="color: #5E5E5E;">=</span> metric_group.distribution(<span class="st" style="color: #20794D;">'metric_distribution_y'</span>)</span>
<span id="cb12-42">        <span class="va" style="color: #111111;">self</span>.metric_total_10_sec <span class="op" style="color: #5E5E5E;">=</span> metric_group.meter(<span class="st" style="color: #20794D;">'total_10_sec'</span>, time_span_in_seconds<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">10</span>)</span>
<span id="cb12-43">        <span class="va" style="color: #111111;">self</span>.metric_right_10_sec <span class="op" style="color: #5E5E5E;">=</span> metric_group.meter(<span class="st" style="color: #20794D;">'right_10_sec'</span>, time_span_in_seconds<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">10</span>)</span>
<span id="cb12-44"></span>
<span id="cb12-45">    <span class="kw" style="color: #003B4F;">def</span> <span class="bu" style="color: null;">eval</span>(<span class="va" style="color: #111111;">self</span>, x, y):</span>
<span id="cb12-46">        <span class="co" style="color: #5E5E5E;"># x: 1-dim gray value</span></span>
<span id="cb12-47">        <span class="co" style="color: #5E5E5E;"># y: 0-9</span></span>
<span id="cb12-48">        <span class="va" style="color: #111111;">self</span>.clf.partial_fit([x], [y], classes<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">self</span>.classes) <span class="co" style="color: #5E5E5E;"># 1dim to 2dim</span></span>
<span id="cb12-49">        <span class="va" style="color: #111111;">self</span>.dump_model() <span class="co" style="color: #5E5E5E;"># save to redis</span></span>
<span id="cb12-50">        y_pred <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.clf.predict([x])[<span class="dv" style="color: #AD0000;">0</span>]</span>
<span id="cb12-51">        <span class="va" style="color: #111111;">self</span>.metric_counter.inc(<span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb12-52">        <span class="va" style="color: #111111;">self</span>.metric_total_10_sec.mark_event(<span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb12-53">        <span class="cf" style="color: #003B4F;">if</span> y_pred <span class="op" style="color: #5E5E5E;">==</span> y:</span>
<span id="cb12-54">            <span class="va" style="color: #111111;">self</span>.metric_right_10_sec.mark_event(<span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb12-55">        <span class="va" style="color: #111111;">self</span>.metric_predict_acc <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.metric_right_10_sec.get_count() <span class="op" style="color: #5E5E5E;">/</span> <span class="va" style="color: #111111;">self</span>.metric_total_10_sec.get_count()</span>
<span id="cb12-56">        <span class="va" style="color: #111111;">self</span>.metric_distribution_y.update(y)</span>
<span id="cb12-57"></span>
<span id="cb12-58">        <span class="cf" style="color: #003B4F;">return</span> y_pred</span>
<span id="cb12-59">    </span>
<span id="cb12-60">    <span class="kw" style="color: #003B4F;">def</span> load_model(<span class="va" style="color: #111111;">self</span>)</span>
<span id="cb12-61">        r <span class="op" style="color: #5E5E5E;">=</span> redis.StrictRedis(<span class="op" style="color: #5E5E5E;">**</span><span class="va" style="color: #111111;">self</span>.redis_params)</span>
<span id="cb12-62">        clf <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">None</span></span>
<span id="cb12-63"></span>
<span id="cb12-64">        <span class="cf" style="color: #003B4F;">try</span>:</span>
<span id="cb12-65">            clf<span class="op" style="color: #5E5E5E;">=</span>pickle.loads(r.get(<span class="va" style="color: #111111;">self</span>.model_name))</span>
<span id="cb12-66">        <span class="cf" style="color: #003B4F;">except</span> <span class="pp" style="color: #AD0000;">TypeError</span>:</span>
<span id="cb12-67">            logging.info(<span class="st" style="color: #20794D;">'no model in redis, init new model...'</span>)</span>
<span id="cb12-68">        <span class="cf" style="color: #003B4F;">except</span> (redis.exceptions.RedisError, <span class="pp" style="color: #AD0000;">TypeError</span>, <span class="pp" style="color: #AD0000;">Exception</span>):</span>
<span id="cb12-69">            logging.warning(<span class="st" style="color: #20794D;">'redis error, init new model...'</span>)</span>
<span id="cb12-70">        <span class="cf" style="color: #003B4F;">finally</span>:</span>
<span id="cb12-71">            clf <span class="op" style="color: #5E5E5E;">=</span> clf <span class="kw" style="color: #003B4F;">or</span> SGDClassifier(alpha<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.01</span>, loss<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'log'</span>, penalty<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'l1'</span>)</span>
<span id="cb12-72">        <span class="cf" style="color: #003B4F;">return</span> clf</span>
<span id="cb12-73">    </span>
<span id="cb12-74">    <span class="kw" style="color: #003B4F;">def</span> dump_model(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb12-75">        <span class="cf" style="color: #003B4F;">if</span> (datetime.now() <span class="op" style="color: #5E5E5E;">-</span> <span class="va" style="color: #111111;">self</span>.last_dump_time).seconds <span class="op" style="color: #5E5E5E;">&gt;=</span> <span class="va" style="color: #111111;">self</span>.interval_dump_seconds:</span>
<span id="cb12-76">            r <span class="op" style="color: #5E5E5E;">=</span> redis.StrictRedis(<span class="op" style="color: #5E5E5E;">**</span><span class="va" style="color: #111111;">self</span>.redis_params)</span>
<span id="cb12-77">            <span class="cf" style="color: #003B4F;">try</span>:</span>
<span id="cb12-78">                r.<span class="bu" style="color: null;">set</span>(<span class="va" style="color: #111111;">self</span>.model_name, pickle.dumps(<span class="va" style="color: #111111;">self</span>.clf, protocol <span class="op" style="color: #5E5E5E;">=</span> pickle.HIGHEST_PROTOCOL))</span>
<span id="cb12-79">            <span class="cf" style="color: #003B4F;">except</span> (redis.exceptions.RedisError, <span class="pp" style="color: #AD0000;">TypeError</span>, <span class="pp" style="color: #AD0000;">Exception</span>):</span>
<span id="cb12-80">                logging.warning(<span class="st" style="color: #20794D;">'redis error, failed to store model...'</span>)</span>
<span id="cb12-81">            <span class="va" style="color: #111111;">self</span>.last_dump_time <span class="op" style="color: #5E5E5E;">=</span> datetime.now()</span>
<span id="cb12-82"></span>
<span id="cb12-83">model <span class="op" style="color: #5E5E5E;">=</span> udf(Model(), input_types<span class="op" style="color: #5E5E5E;">=</span>[DataTypes.ARRAY(DataTypes.INT()), DataTypes.TINYINT()], result_type<span class="op" style="color: #5E5E5E;">=</span>DataTypes.TINYINT())</span>
<span id="cb12-84">t_env.register_function(<span class="st" style="color: #20794D;">'train_and_predict'</span>, model)</span>
<span id="cb12-85"></span>
<span id="cb12-86"><span class="co" style="color: #5E5E5E;"># 4. create source table</span></span>
<span id="cb12-87">t_env.execute_sql(<span class="ss" style="color: #20794D;">f"""</span></span>
<span id="cb12-88"><span class="ss" style="color: #20794D;">    CREATE TABLE source (</span></span>
<span id="cb12-89"><span class="ss" style="color: #20794D;">        x ARRAY&lt;INT&gt;,</span></span>
<span id="cb12-90"><span class="ss" style="color: #20794D;">        actual_y TINYINT,</span></span>
<span id="cb12-91"><span class="ss" style="color: #20794D;">        ts TIMESTAMP(3),</span></span>
<span id="cb12-92"><span class="ss" style="color: #20794D;">    ) with (</span></span>
<span id="cb12-93"><span class="ss" style="color: #20794D;">        'connector' = 'kafka',</span></span>
<span id="cb12-94"><span class="ss" style="color: #20794D;">        'topic' = '</span><span class="sc" style="color: #5E5E5E;">{</span>source_topic<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">',</span></span>
<span id="cb12-95"><span class="ss" style="color: #20794D;">        'properties.bootstrap.servers' = '</span><span class="sc" style="color: #5E5E5E;">{</span>kafka_servers<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">',</span></span>
<span id="cb12-96"><span class="ss" style="color: #20794D;">        'properties.group.id' = '</span><span class="sc" style="color: #5E5E5E;">{</span>kafka_consumer_group_id<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">',</span></span>
<span id="cb12-97"><span class="ss" style="color: #20794D;">        'scan.startup.mode' = 'latest-offset',</span></span>
<span id="cb12-98"><span class="ss" style="color: #20794D;">        'json.fail-on-missing-field' = 'false',</span></span>
<span id="cb12-99"><span class="ss" style="color: #20794D;">        'json.ignore-parse-errors' = 'true',</span></span>
<span id="cb12-100"><span class="ss" style="color: #20794D;">        'format' = 'json'</span></span>
<span id="cb12-101"><span class="ss" style="color: #20794D;">    )</span></span>
<span id="cb12-102"><span class="ss" style="color: #20794D;">"""</span></span>
<span id="cb12-103">)</span>
<span id="cb12-104"></span>
<span id="cb12-105"><span class="co" style="color: #5E5E5E;"># 5. create sink table</span></span>
<span id="cb12-106">t_env.execute_sql(<span class="ss" style="color: #20794D;">f"""</span></span>
<span id="cb12-107"><span class="ss" style="color: #20794D;">    CREATE TABLE sink (</span></span>
<span id="cb12-108"><span class="ss" style="color: #20794D;">        x ARRAY&lt;INT&gt;</span></span>
<span id="cb12-109"><span class="ss" style="color: #20794D;">        actual_y TINYINT,</span></span>
<span id="cb12-110"><span class="ss" style="color: #20794D;">        predict_y TINYINT,</span></span>
<span id="cb12-111"><span class="ss" style="color: #20794D;">) with (</span></span>
<span id="cb12-112"><span class="ss" style="color: #20794D;">    'connector' = 'kafka',</span></span>
<span id="cb12-113"><span class="ss" style="color: #20794D;">        'topic' = '</span><span class="sc" style="color: #5E5E5E;">{</span>sink_topic<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">',</span></span>
<span id="cb12-114"><span class="ss" style="color: #20794D;">        'properties.bootstrap.servers' = '</span><span class="sc" style="color: #5E5E5E;">{</span>kafka_servers<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">',</span></span>
<span id="cb12-115"><span class="ss" style="color: #20794D;">        'properties.group.id' = '</span><span class="sc" style="color: #5E5E5E;">{</span>kafka_consumer_group_id<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">',</span></span>
<span id="cb12-116"><span class="ss" style="color: #20794D;">        'scan.startup.mode' = 'latest-offset',</span></span>
<span id="cb12-117"><span class="ss" style="color: #20794D;">        'json.fail-on-missing-field' = 'false',</span></span>
<span id="cb12-118"><span class="ss" style="color: #20794D;">        'json.ignore-parse-errors' = 'true',</span></span>
<span id="cb12-119"><span class="ss" style="color: #20794D;">        'format' = 'json'</span></span>
<span id="cb12-120"><span class="ss" style="color: #20794D;">    )</span></span>
<span id="cb12-121"><span class="ss" style="color: #20794D;">"""</span></span>
<span id="cb12-122">)</span>
<span id="cb12-123"></span>
<span id="cb12-124"><span class="co" style="color: #5E5E5E;"># 6. stream processing</span></span>
<span id="cb12-125">t_env.sql_query(<span class="st" style="color: #20794D;">"""</span></span>
<span id="cb12-126"><span class="st" style="color: #20794D;">    SELECT</span></span>
<span id="cb12-127"><span class="st" style="color: #20794D;">        x,</span></span>
<span id="cb12-128"><span class="st" style="color: #20794D;">        actual_y,</span></span>
<span id="cb12-129"><span class="st" style="color: #20794D;">        train_and_predict(x, actual_y) AS predict_y</span></span>
<span id="cb12-130"><span class="st" style="color: #20794D;">    FROM</span></span>
<span id="cb12-131"><span class="st" style="color: #20794D;">        source</span></span>
<span id="cb12-132"><span class="st" style="color: #20794D;">"""</span>).insert_into(<span class="st" style="color: #20794D;">"sink"</span>)</span>
<span id="cb12-133">t_env.execute(<span class="st" style="color: #20794D;">'Classifier Model Train'</span>)</span></code></pre></div>
</section>
<section id="model-serving-via-flask" class="level3" data-number="5.3">
<h3 data-number="5.3" class="anchored" data-anchor-id="model-serving-via-flask"><span class="header-section-number">5.3</span> Model Serving via Flask</h3>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"><span class="co" style="color: #5E5E5E;"># settings</span></span>
<span id="cb13-2">redis_params <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">dict</span>(</span>
<span id="cb13-3">    host<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'localhost'</span>,</span>
<span id="cb13-4">    password<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'redis_password'</span>,</span>
<span id="cb13-5">    port<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">6379</span>,</span>
<span id="cb13-6">    db<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">0</span></span>
<span id="cb13-7">)</span>
<span id="cb13-8">model_key <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'online_ml_model'</span></span>
<span id="cb13-9"><span class="co" style="color: #5E5E5E;"># create app</span></span>
<span id="cb13-10">app <span class="op" style="color: #5E5E5E;">=</span> Flask(<span class="va" style="color: #111111;">__name__</span>)</span>
<span id="cb13-11">CORS(app)</span>
<span id="cb13-12"></span>
<span id="cb13-13"><span class="co" style="color: #5E5E5E;"># model</span></span>
<span id="cb13-14">clf <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">None</span></span>
<span id="cb13-15"><span class="kw" style="color: #003B4F;">def</span> load_latest_clf_model():</span>
<span id="cb13-16">    r <span class="op" style="color: #5E5E5E;">=</span> redis.StrictRedis(<span class="op" style="color: #5E5E5E;">**</span>redis_params)</span>
<span id="cb13-17">    model<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">None</span></span>
<span id="cb13-18">    <span class="cf" style="color: #003B4F;">try</span>:</span>
<span id="cb13-19">        model<span class="op" style="color: #5E5E5E;">=</span>pickle.loads(r.get(model_key))</span>
<span id="cb13-20">    <span class="cf" style="color: #003B4F;">except</span> <span class="pp" style="color: #AD0000;">TypeError</span>:</span>
<span id="cb13-21">        logging.exception(<span class="st" style="color: #20794D;">'No model in redis, maybe key error'</span>)</span>
<span id="cb13-22">    <span class="cf" style="color: #003B4F;">except</span> (redis.exceptions.RedisError, <span class="pp" style="color: #AD0000;">TypeError</span>, <span class="pp" style="color: #AD0000;">Exception</span>) <span class="im" style="color: #00769E;">as</span> err:</span>
<span id="cb13-23">        logging.exception(<span class="ss" style="color: #20794D;">f'RedisError: </span><span class="sc" style="color: #5E5E5E;">{</span>err<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">'</span>)</span>
<span id="cb13-24">    <span class="cf" style="color: #003B4F;">return</span> model</span>
<span id="cb13-25"></span>
<span id="cb13-26"><span class="co" style="color: #5E5E5E;"># raw data to input</span></span>
<span id="cb13-27"><span class="kw" style="color: #003B4F;">def</span> format_svg_base64(s: <span class="bu" style="color: null;">str</span>) <span class="op" style="color: #5E5E5E;">-&gt;</span> np.array:</span>
<span id="cb13-28">    <span class="co" style="color: #5E5E5E;"># base64 string to svg to 8*8 array to 1-dim array</span></span>
<span id="cb13-29"></span>
<span id="cb13-30">    <span class="co" style="color: #5E5E5E;"># base64 to svg</span></span>
<span id="cb13-31">    <span class="cf" style="color: #003B4F;">with</span> <span class="bu" style="color: null;">open</span>(<span class="st" style="color: #20794D;">'digit.svg'</span>, <span class="st" style="color: #20794D;">'wb'</span>) <span class="im" style="color: #00769E;">as</span> f:</span>
<span id="cb13-32">        f.write(base64.b64decode(s))</span>
<span id="cb13-33">    <span class="co" style="color: #5E5E5E;"># svg to png</span></span>
<span id="cb13-34">    drawing <span class="op" style="color: #5E5E5E;">=</span> svg2rlg(<span class="st" style="color: #20794D;">'digit.svg'</span>)</span>
<span id="cb13-35">    renderPM.drawToFile(drawing, <span class="st" style="color: #20794D;">'digit.svg'</span>, fmt<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'png'</span>)</span>
<span id="cb13-36">    <span class="co" style="color: #5E5E5E;"># png to 8 * 8</span></span>
<span id="cb13-37">    target_w, target_h <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">8</span>, <span class="dv" style="color: #AD0000;">8</span></span>
<span id="cb13-38">    png <span class="op" style="color: #5E5E5E;">=</span> Image.<span class="bu" style="color: null;">open</span>(<span class="st" style="color: #20794D;">'digit.png'</span>)</span>
<span id="cb13-39">    w, h <span class="op" style="color: #5E5E5E;">=</span> png.size</span>
<span id="cb13-40">    scale <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">min</span>(target_w<span class="op" style="color: #5E5E5E;">/</span> w, target_h<span class="op" style="color: #5E5E5E;">/</span> h)</span>
<span id="cb13-41">    new_w, new_h <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">int</span>(w<span class="op" style="color: #5E5E5E;">*</span>scale, h<span class="op" style="color: #5E5E5E;">*</span>scale)</span>
<span id="cb13-42">    png<span class="op" style="color: #5E5E5E;">=</span>png.resize((new_w, new_h), Image.BILINEAR)</span>
<span id="cb13-43">    new_png <span class="op" style="color: #5E5E5E;">=</span> Image.new(<span class="st" style="color: #20794D;">'RGB'</span>, (target_w, target_h), (<span class="dv" style="color: #AD0000;">255</span>,<span class="dv" style="color: #AD0000;">255</span>,<span class="dv" style="color: #AD0000;">255</span>)) <span class="co" style="color: #5E5E5E;"># create blank img</span></span>
<span id="cb13-44">    new_png.paste(png, ((target_w<span class="op" style="color: #5E5E5E;">-</span>new_w)<span class="op" style="color: #5E5E5E;">//</span><span class="dv" style="color: #AD0000;">2</span>, (target_h<span class="op" style="color: #5E5E5E;">-</span>new_h)<span class="op" style="color: #5E5E5E;">//</span><span class="dv" style="color: #AD0000;">2</span>)) <span class="co" style="color: #5E5E5E;"># copy to center</span></span>
<span id="cb13-45">    <span class="co" style="color: #5E5E5E;"># convert black to white, value to 0-16, size to 1*64</span></span>
<span id="cb13-46">    array <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">255</span> <span class="op" style="color: #5E5E5E;">-</span> np.array(new_png.convert(<span class="st" style="color: #20794D;">'L'</span>))</span>
<span id="cb13-47">    array <span class="op" style="color: #5E5E5E;">=</span> (array<span class="op" style="color: #5E5E5E;">/</span><span class="dv" style="color: #AD0000;">255</span>) <span class="op" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">16</span></span>
<span id="cb13-48">    array <span class="op" style="color: #5E5E5E;">=</span> array.reshape(<span class="dv" style="color: #AD0000;">1</span>, <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb13-49">    <span class="cf" style="color: #003B4F;">return</span> array</span>
<span id="cb13-50"></span>
<span id="cb13-51"><span class="at" style="color: #657422;">@app.route</span>(<span class="st" style="color: #20794D;">'/'</span>)</span>
<span id="cb13-52"><span class="kw" style="color: #003B4F;">def</span> home():</span>
<span id="cb13-53">    <span class="cf" style="color: #003B4F;">return</span> render_template(<span class="st" style="color: #20794D;">'web.html'</span>)</span>
<span id="cb13-54"><span class="at" style="color: #657422;">@app.route</span>(<span class="st" style="color: #20794D;">'/predict'</span>, methods<span class="op" style="color: #5E5E5E;">=</span>[<span class="st" style="color: #20794D;">'POST'</span>])</span>
<span id="cb13-55"><span class="kw" style="color: #003B4F;">def</span> predict():</span>
<span id="cb13-56">    <span class="kw" style="color: #003B4F;">global</span> clf</span>
<span id="cb13-57">    img_string <span class="op" style="color: #5E5E5E;">=</span>request.form[<span class="st" style="color: #20794D;">'imgStr'</span>]</span>
<span id="cb13-58">    data <span class="op" style="color: #5E5E5E;">=</span> format_svg_base64(img_string) <span class="co" style="color: #5E5E5E;"># feature engineering</span></span>
<span id="cb13-59">    model <span class="op" style="color: #5E5E5E;">=</span> load_latest_clf_model() <span class="co" style="color: #5E5E5E;"># model loading</span></span>
<span id="cb13-60">    clf <span class="op" style="color: #5E5E5E;">=</span> model <span class="kw" style="color: #003B4F;">or</span> clf</span>
<span id="cb13-61">    predict_y <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">int</span>(clf.predict(data)[<span class="dv" style="color: #AD0000;">0</span>])</span>
<span id="cb13-62">    <span class="cf" style="color: #003B4F;">return</span> jsonify({<span class="st" style="color: #20794D;">'success'</span>:<span class="va" style="color: #111111;">True</span>, <span class="st" style="color: #20794D;">'predict_result'</span>:predict_y}), <span class="dv" style="color: #AD0000;">201</span></span>
<span id="cb13-63"></span>
<span id="cb13-64"><span class="cf" style="color: #003B4F;">if</span> <span class="va" style="color: #111111;">__name__</span> <span class="op" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">'__main__'</span>:</span>
<span id="cb13-65">    app.run(host<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'127.0.0.1'</span>, port<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">8066</span>, debug<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span></code></pre></div>
</section>
<section id="retrain-model" class="level3" data-number="5.4">
<h3 data-number="5.4" class="anchored" data-anchor-id="retrain-model"><span class="header-section-number">5.4</span> Retrain Model</h3>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1">redis_params <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">dict</span>(</span>
<span id="cb14-2">    host<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'localhost'</span>,</span>
<span id="cb14-3">    password<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'redis_password'</span>,</span>
<span id="cb14-4">    port<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">6379</span>,</span>
<span id="cb14-5">    db<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">0</span></span>
<span id="cb14-6">)</span>
<span id="cb14-7">r <span class="op" style="color: #5E5E5E;">=</span> redis.StrictRedis(<span class="op" style="color: #5E5E5E;">**</span>redis_params)</span>
<span id="cb14-8"><span class="cf" style="color: #003B4F;">try</span>:</span>
<span id="cb14-9">    model<span class="op" style="color: #5E5E5E;">=</span>r.ping()</span>
<span id="cb14-10"><span class="cf" style="color: #003B4F;">except</span> (redis.exceptions.RedisError, <span class="pp" style="color: #AD0000;">TypeError</span>, <span class="pp" style="color: #AD0000;">Exception</span>)<span class="im" style="color: #00769E;">as</span> err:</span>
<span id="cb14-11">    <span class="cf" style="color: #003B4F;">raise</span> <span class="pp" style="color: #AD0000;">Exception</span>(<span class="ss" style="color: #20794D;">f'cannot connect to redis:</span><span class="sc" style="color: #5E5E5E;">{</span>err<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">'</span>)</span>
<span id="cb14-12"><span class="cf" style="color: #003B4F;">if</span> <span class="bu" style="color: null;">len</span>(sys.argv) <span class="op" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">1</span>: <span class="co" style="color: #5E5E5E;"># delete whole database when no arguments sent in</span></span>
<span id="cb14-13">    r.flushdb()</span>
<span id="cb14-14"><span class="cf" style="color: #003B4F;">else</span>:</span>
<span id="cb14-15">    <span class="cf" style="color: #003B4F;">for</span> key <span class="kw" style="color: #003B4F;">in</span> sys.argv[<span class="dv" style="color: #AD0000;">1</span>:]: <span class="co" style="color: #5E5E5E;"># delete specific key</span></span>
<span id="cb14-16">        <span class="cf" style="color: #003B4F;">if</span> r.exists(key):</span>
<span id="cb14-17">            r.delete(key)</span></code></pre></div>


</section>
</section>

 ]]></description>
  <category>python</category>
  <category>flink</category>
  <category>kafka</category>
  <category>tutorial</category>
  <guid>https://waterking.cc/posts/tutorials/flink/flink.html</guid>
  <pubDate>Sun, 11 Dec 2022 16:00:00 GMT</pubDate>
  <media:content url="https://waterking.cc/posts/tutorials/flink/test.png" medium="image" type="image/png" height="42" width="144"/>
</item>
<item>
  <title>PySpark Tutorial</title>
  <link>https://waterking.cc/posts/tutorials/spark/spark.html</link>
  <description><![CDATA[ 



<div class="{fig-vis}">
<p><img src="https://waterking.cc/posts/tutorials/spark/test.png" class="img-fluid" style="width:100.0%"></p>
</div>
<section id="import-packages" class="level2" data-number="1">
<h2 data-number="1" class="anchored" data-anchor-id="import-packages"><span class="header-section-number">1</span> Import Packages</h2>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;">import</span> numpy <span class="im" style="color: #00769E;">as</span> np, pandas <span class="im" style="color: #00769E;">as</span> pd, sklearn, random, os</span>
<span id="cb1-2"><span class="im" style="color: #00769E;">from</span> pyspark.sql <span class="im" style="color: #00769E;">import</span> SparkSession, SQLContext</span>
<span id="cb1-3"><span class="im" style="color: #00769E;">from</span> pyspark.sql.functions <span class="im" style="color: #00769E;">import</span> mean, col, split, regexp_extract, when, lit, isnan, count</span>
<span id="cb1-4"><span class="im" style="color: #00769E;">from</span> pyspark.ml <span class="im" style="color: #00769E;">import</span> Pipeline</span>
<span id="cb1-5"><span class="im" style="color: #00769E;">from</span> pyspark.ml.feature <span class="im" style="color: #00769E;">import</span> StringIndexer, IndexToString, VectorAssembler, QuantileDiscretizer</span>
<span id="cb1-6"><span class="im" style="color: #00769E;">from</span> pyspark.ml.evaluation <span class="im" style="color: #00769E;">import</span> RegressionEvaluator, MulticlassClassificationEvaluator</span>
<span id="cb1-7"><span class="im" style="color: #00769E;">from</span> pyspark.ml.recommendation <span class="im" style="color: #00769E;">import</span> ALS</span>
<span id="cb1-8"><span class="im" style="color: #00769E;">from</span> pyspark.ml.classification <span class="im" style="color: #00769E;">import</span> LogisticRegression, RandomForestClassfier, GBTClassifier</span>
<span id="cb1-9"><span class="im" style="color: #00769E;">from</span> pyspark.ml.tuning <span class="im" style="color: #00769E;">import</span> ParamGridBuilder, TrainValidationSplit</span></code></pre></div>
</section>
<section id="data-loading" class="level2" data-number="2">
<h2 data-number="2" class="anchored" data-anchor-id="data-loading"><span class="header-section-number">2</span> Data Loading</h2>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="co" style="color: #5E5E5E;"># 1. Create SparkSession</span></span>
<span id="cb2-2">spark <span class="op" style="color: #5E5E5E;">=</span> SparkSession.builder.appName(<span class="st" style="color: #20794D;">'name'</span>).getOrCreate()</span>
<span id="cb2-3"></span>
<span id="cb2-4"><span class="co" style="color: #5E5E5E;"># 2. Load Dataset</span></span>
<span id="cb2-5">df <span class="op" style="color: #5E5E5E;">=</span> spark.read.csv(<span class="st" style="color: #20794D;">'data.csv'</span>, inferSchema<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>, header<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span></code></pre></div>
</section>
<section id="eda" class="level2" data-number="3">
<h2 data-number="3" class="anchored" data-anchor-id="eda"><span class="header-section-number">3</span> EDA</h2>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="co" style="color: #5E5E5E;"># 1. Display Dataset Schema</span></span>
<span id="cb3-2">df.limit(<span class="dv" style="color: #AD0000;">3</span>).toPandas() <span class="co" style="color: #5E5E5E;"># show 3 rows</span></span>
<span id="cb3-3">df.select(<span class="st" style="color: #20794D;">'col_1'</span>, <span class="st" style="color: #20794D;">'col_2'</span>, <span class="st" style="color: #20794D;">'col_3'</span>).toPandas() <span class="co" style="color: #5E5E5E;"># show 3 cols</span></span>
<span id="cb3-4"></span>
<span id="cb3-5"><span class="co" style="color: #5E5E5E;"># 2. Display feature types</span></span>
<span id="cb3-6">df.printSchema()</span></code></pre></div>
</section>
<section id="data-preprocessing" class="level2" data-number="4">
<h2 data-number="4" class="anchored" data-anchor-id="data-preprocessing"><span class="header-section-number">4</span> Data Preprocessing</h2>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="co" style="color: #5E5E5E;"># 1. Convert string column to numeric values</span></span>
<span id="cb4-2"><span class="co" style="color: #5E5E5E;"># 1.1 single column</span></span>
<span id="cb4-3">stringIndexer <span class="op" style="color: #5E5E5E;">=</span> StringIndexer(inputCol<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'title'</span>, outputCol<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'title_new'</span>)</span>
<span id="cb4-4">indexer <span class="op" style="color: #5E5E5E;">=</span> stringIndexer.fit(df) <span class="co" style="color: #5E5E5E;"># save for final int to string</span></span>
<span id="cb4-5">new_df <span class="op" style="color: #5E5E5E;">=</span> indexer.transform(df)</span>
<span id="cb4-6"><span class="co" style="color: #5E5E5E;"># 1.2 multiple columns</span></span>
<span id="cb4-7">indexers <span class="op" style="color: #5E5E5E;">=</span> [StringIndexer(inputCol<span class="op" style="color: #5E5E5E;">=</span>column, outputCol<span class="op" style="color: #5E5E5E;">=</span>column<span class="op" style="color: #5E5E5E;">+</span><span class="st" style="color: #20794D;">"_index"</span>).fit(df) <span class="cf" style="color: #003B4F;">for</span> column <span class="kw" style="color: #003B4F;">in</span> [<span class="st" style="color: #20794D;">'sex'</span>, <span class="st" style="color: #20794D;">'Embarked'</span>, <span class="st" style="color: #20794D;">'Initial'</span>]]</span>
<span id="cb4-8">pipeline <span class="op" style="color: #5E5E5E;">=</span> Pipeline(stages<span class="op" style="color: #5E5E5E;">=</span>indexers)</span>
<span id="cb4-9">new_df <span class="op" style="color: #5E5E5E;">=</span> pipeline.fit(df).transform(df)</span>
<span id="cb4-10"></span>
<span id="cb4-11"><span class="co" style="color: #5E5E5E;"># 2. Check null values</span></span>
<span id="cb4-12">new_df.select([count(when(isnan(c) <span class="op" style="color: #5E5E5E;">|</span> col(c).isNull(), c)).alias(c) <span class="cf" style="color: #003B4F;">for</span> c <span class="kw" style="color: #003B4F;">in</span> new_df.columns]).show()</span>
<span id="cb4-13"></span>
<span id="cb4-14"><span class="co" style="color: #5E5E5E;"># 3. Fill missing values</span></span>
<span id="cb4-15"><span class="co" style="color: #5E5E5E;"># 3.1 Drop column with many many missing values</span></span>
<span id="cb4-16">new_df.drop(<span class="st" style="color: #20794D;">'Cabin'</span>)</span>
<span id="cb4-17"></span>
<span id="cb4-18"><span class="co" style="color: #5E5E5E;"># 3.2. Complete missing values with average value grouped by a column: Woman age 22 , Man age 33</span></span>
<span id="cb4-19">new_df.groupby(<span class="st" style="color: #20794D;">'Initial'</span>).avg(<span class="st" style="color: #20794D;">'Age'</span>).collect()</span>
<span id="cb4-20">new_df <span class="op" style="color: #5E5E5E;">=</span> new_df.withColumn(<span class="st" style="color: #20794D;">'Age'</span>, when((df[<span class="st" style="color: #20794D;">'Initial'</span>]<span class="op" style="color: #5E5E5E;">==</span><span class="st" style="color: #20794D;">'Miss'</span>) <span class="op" style="color: #5E5E5E;">&amp;</span> (df[<span class="st" style="color: #20794D;">'Age'</span>].isNull()), <span class="dv" style="color: #AD0000;">22</span>).otherwise(df[<span class="st" style="color: #20794D;">'Age'</span>]))</span>
<span id="cb4-21">new_df <span class="op" style="color: #5E5E5E;">=</span> new_df.withColumn(<span class="st" style="color: #20794D;">'Age'</span>, when((df[<span class="st" style="color: #20794D;">'Initial'</span>]<span class="op" style="color: #5E5E5E;">==</span><span class="st" style="color: #20794D;">'Mr'</span>) <span class="op" style="color: #5E5E5E;">&amp;</span> (df[<span class="st" style="color: #20794D;">'Age'</span>].isNull()), <span class="dv" style="color: #AD0000;">33</span>).otherwise(df[<span class="st" style="color: #20794D;">'Age'</span>]))</span>
<span id="cb4-22"></span>
<span id="cb4-23"><span class="co" style="color: #5E5E5E;"># 3.3 Assign a major value to a column </span></span>
<span id="cb4-24">new_df <span class="op" style="color: #5E5E5E;">=</span> new_df.na.fill({<span class="st" style="color: #20794D;">'Embark'</span>: <span class="st" style="color: #20794D;">'S'</span>})</span>
<span id="cb4-25"></span>
<span id="cb4-26"><span class="co" style="color: #5E5E5E;"># 4. Drop columns that not needed</span></span>
<span id="cb4-27"></span>
<span id="cb4-28"><span class="co" style="color: #5E5E5E;"># 5. Vectorize features</span></span>
<span id="cb4-29">feature <span class="op" style="color: #5E5E5E;">=</span> VectorAssembler(inputCols <span class="op" style="color: #5E5E5E;">=</span> new_df.columns[<span class="dv" style="color: #AD0000;">1</span>:], outputCol<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'features'</span>)</span>
<span id="cb4-30">feature_vector <span class="op" style="color: #5E5E5E;">=</span> feature.transform(new_df)</span>
<span id="cb4-31"></span>
<span id="cb4-32"><span class="co" style="color: #5E5E5E;"># 6. Select Features and Labels</span></span>
<span id="cb4-33">new_df <span class="op" style="color: #5E5E5E;">=</span> feature_vector.select([<span class="st" style="color: #20794D;">'features'</span>, <span class="st" style="color: #20794D;">'Survived'</span>])</span>
<span id="cb4-34"></span>
<span id="cb4-35"><span class="co" style="color: #5E5E5E;"># 7. Split dataset into train and test</span></span>
<span id="cb4-36">train, test <span class="op" style="color: #5E5E5E;">=</span> new_df.randomSplit([<span class="fl" style="color: #AD0000;">0.75</span>, <span class="fl" style="color: #AD0000;">0.25</span>], seed<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">11</span>)</span></code></pre></div>
</section>
<section id="train-ml-model" class="level2" data-number="5">
<h2 data-number="5" class="anchored" data-anchor-id="train-ml-model"><span class="header-section-number">5</span> Train ML Model</h2>
<section id="regression" class="level3" data-number="5.1">
<h3 data-number="5.1" class="anchored" data-anchor-id="regression"><span class="header-section-number">5.1</span> Regression</h3>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="co" style="color: #5E5E5E;"># 1. train and test</span></span>
<span id="cb5-2">prediction <span class="op" style="color: #5E5E5E;">=</span> model.fit(train).transform(test)</span>
<span id="cb5-3"></span>
<span id="cb5-4"><span class="co" style="color: #5E5E5E;"># 2. evaluate</span></span>
<span id="cb5-5">evaluator <span class="op" style="color: #5E5E5E;">=</span> RegressionEvaluator(metricName<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'rmse'</span>, predictionCol<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'prediction'</span>,labelCol<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'rating'</span>)</span>
<span id="cb5-6">rmse <span class="op" style="color: #5E5E5E;">=</span> evaluator.evaluate(prediction)</span></code></pre></div>
</section>
<section id="classification" class="level3" data-number="5.2">
<h3 data-number="5.2" class="anchored" data-anchor-id="classification"><span class="header-section-number">5.2</span> Classification</h3>
<section id="logistic-regression" class="level4">
<h4 class="anchored" data-anchor-id="logistic-regression">Logistic Regression</h4>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">lr <span class="op" style="color: #5E5E5E;">=</span> LogisticRegression(labelCol<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'Survived'</span>)</span>
<span id="cb6-2">paramGrid <span class="op" style="color: #5E5E5E;">=</span> ParamGridBuilder().addGrid(lr.regParam, (<span class="fl" style="color: #AD0000;">0.01</span>, <span class="fl" style="color: #AD0000;">0.1</span>))</span>
<span id="cb6-3">                                .addGrid(lr.maxIter, (<span class="dv" style="color: #AD0000;">5</span>, <span class="dv" style="color: #AD0000;">10</span>))<span class="op" style="color: #5E5E5E;">\</span></span>
<span id="cb6-4">                                .addGrid(lr.tol, (<span class="fl" style="color: #AD0000;">1e-4</span>, <span class="fl" style="color: #AD0000;">1e-5</span>))<span class="op" style="color: #5E5E5E;">\</span></span>
<span id="cb6-5">                                .addGrid(lr.elasticNetParam, (<span class="fl" style="color: #AD0000;">0.25</span>,<span class="fl" style="color: #AD0000;">0.75</span>))<span class="op" style="color: #5E5E5E;">\</span></span>
<span id="cb6-6">                                .build()</span>
<span id="cb6-7">model <span class="op" style="color: #5E5E5E;">=</span> TrainValidationSplit(estimator<span class="op" style="color: #5E5E5E;">=</span>lr, estimatorParamMaps<span class="op" style="color: #5E5E5E;">=</span>paramGrid,</span>
<span id="cb6-8">                            evaluator<span class="op" style="color: #5E5E5E;">=</span>MulticlassClassificationEvaluator(labelCol<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'Survived'</span>),</span>
<span id="cb6-9">                            trainRatio<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.8</span>)</span>
<span id="cb6-10">predictions <span class="op" style="color: #5E5E5E;">=</span> model.fit(train).transform(test)</span>
<span id="cb6-11">acc <span class="op" style="color: #5E5E5E;">=</span> MulticlassClassificationEvaluator(labelCol<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'Survived'</span>,metricName<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'accuracy'</span>).evaluate(predictions)</span>
<span id="cb6-12">pre <span class="op" style="color: #5E5E5E;">=</span> MulticlassClassificationEvaluator(labelCol<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'Survived'</span>,metricName<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'weightedPrecision'</span>).evaluate(predictions)</span></code></pre></div>
</section>
<section id="random-forest" class="level4">
<h4 class="anchored" data-anchor-id="random-forest">Random Forest</h4>
</section>
<section id="gradient-boosted-tree" class="level4">
<h4 class="anchored" data-anchor-id="gradient-boosted-tree">Gradient Boosted Tree</h4>
</section>
</section>
</section>
<section id="final-prediction-sparksql-practice" class="level2" data-number="6">
<h2 data-number="6" class="anchored" data-anchor-id="final-prediction-sparksql-practice"><span class="header-section-number">6</span> Final Prediction: SparkSQL Practice</h2>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="co" style="color: #5E5E5E;"># 1. create dataframe of distince movies</span></span>
<span id="cb7-2">unique_movies <span class="op" style="color: #5E5E5E;">=</span> new_df.select(<span class="st" style="color: #20794D;">'title_new'</span>).distinct()</span>
<span id="cb7-3"></span>
<span id="cb7-4"><span class="co" style="color: #5E5E5E;"># 2. create function to recommend top n movies to given user</span></span>
<span id="cb7-5"><span class="kw" style="color: #003B4F;">def</span> top_movies(user_id, n):</span>
<span id="cb7-6">    <span class="co" style="color: #5E5E5E;"># 1. simplify table `unique_movies` as `a` for SQL</span></span>
<span id="cb7-7">    a <span class="op" style="color: #5E5E5E;">=</span> unique_movies.alias(<span class="st" style="color: #20794D;">'a'</span>)</span>
<span id="cb7-8"></span>
<span id="cb7-9">    <span class="co" style="color: #5E5E5E;"># 2. SQL: select movies already watched by user</span></span>
<span id="cb7-10">    watched_movies <span class="op" style="color: #5E5E5E;">=</span> new_df.<span class="bu" style="color: null;">filter</span>(new_df[<span class="st" style="color: #20794D;">'userId'</span>]<span class="op" style="color: #5E5E5E;">==</span><span class="st" style="color: #20794D;">'user_id'</span>).select(<span class="st" style="color: #20794D;">'title_new'</span>)</span>
<span id="cb7-11">    b <span class="op" style="color: #5E5E5E;">-</span> watched_movies.alias(<span class="st" style="color: #20794D;">'b'</span>)</span>
<span id="cb7-12"></span>
<span id="cb7-13">    <span class="co" style="color: #5E5E5E;"># 3. SQL: join table</span></span>
<span id="cb7-14">    total_movies <span class="op" style="color: #5E5E5E;">=</span> a.join(b, a.title_new<span class="op" style="color: #5E5E5E;">=</span>b.title_new, how<span class="op" style="color: #5E5E5E;">=</span>left)</span>
<span id="cb7-15"></span>
<span id="cb7-16">    <span class="co" style="color: #5E5E5E;"># 4. SQL: select movies not watched - (filter = where)</span></span>
<span id="cb7-17">    remain_movies <span class="op" style="color: #5E5E5E;">=</span> total_movies.where(col(<span class="st" style="color: #20794D;">'b.title_new'</span>).isNull()).select(a.title_new).distinct()</span>
<span id="cb7-18"></span>
<span id="cb7-19">    <span class="co" style="color: #5E5E5E;"># 5. SQL: add column `userId` with default value user_id</span></span>
<span id="cb7-20">    remain_movies <span class="op" style="color: #5E5E5E;">=</span> remain_movies.withColumn(<span class="st" style="color: #20794D;">'userId'</span>, lit(<span class="bu" style="color: null;">int</span>(user_id)))</span>
<span id="cb7-21"></span>
<span id="cb7-22">    <span class="co" style="color: #5E5E5E;"># 6. SQL: top n</span></span>
<span id="cb7-23">    recommendations <span class="op" style="color: #5E5E5E;">=</span> model.transform(remain_movies).orderBy(<span class="st" style="color: #20794D;">'prediction'</span>, ascending<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>).limit(n)</span>
<span id="cb7-24"></span>
<span id="cb7-25">    <span class="co" style="color: #5E5E5E;"># 7. int back to string</span></span>
<span id="cb7-26">    recommendations <span class="op" style="color: #5E5E5E;">=</span> IndexToString(inputCol<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'title_new'</span>, outputCol<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'title'</span>, labels<span class="op" style="color: #5E5E5E;">=</span>indexer.labels).transform(recommendations)</span>
<span id="cb7-27"></span>
<span id="cb7-28">    <span class="cf" style="color: #003B4F;">return</span> recommendations.show(n, <span class="va" style="color: #111111;">False</span>)</span></code></pre></div>


</section>

 ]]></description>
  <category>python</category>
  <category>spark</category>
  <category>tutorial</category>
  <guid>https://waterking.cc/posts/tutorials/spark/spark.html</guid>
  <pubDate>Sun, 11 Dec 2022 16:00:00 GMT</pubDate>
  <media:content url="https://waterking.cc/posts/tutorials/spark/test.png" medium="image" type="image/png" height="81" width="144"/>
</item>
<item>
  <title>Visualize Model with GradCAM and Super-Resolution</title>
  <link>https://waterking.cc/posts/tutorials/2022-11-19-ai-project/ai-course-project.html</link>
  <description><![CDATA[ 



<div class="{fig-vis}">
<p><img src="https://waterking.cc/posts/tutorials/2022-11-19-ai-project/test.jpg" class="img-fluid"></p>
<p>One day, I got an assignment from my professor. At that time, I was doing research on stock price prediction, but was asked to implement top conference papers with my classmates. Within two days, I have done GradCAM visualization on noisy-label models and make the images clearer by integrating two top conference github projects (NeurIPS 2021, ECCV 2022). This experience allows me to quickly solve new problems that I have no prior knowledge of.</p>
<section id="visualization-results" class="level4 centered">
<h4 class="centered anchored" data-anchor-id="visualization-results">Visualization Results</h4>
</section>
</div>
<section id="model-creation" class="level2" data-number="1">
<h2 data-number="1" class="anchored" data-anchor-id="model-creation"><span class="header-section-number">1</span> Model creation</h2>
<p>We decided to implement papers on noisy labels. After searching, I find model PES from github: <a href="https://github.com/tmllab/PES">Understanding and Improving Early Stopping for Learning with Noisy Labels (NeurIPS 2021)</a></p>
<p>Then, to make sure its correctness, I check the model following the README in its repo and rerun the training procedure with much smaller epoches (check this hyperparameter in the code, like the argparse part in config.py or train.py etc.).</p>
<p>Now I need to get my Grad-cam code and plug it into PES.</p>
</section>
<section id="learning-gradcam" class="level2" data-number="2">
<h2 data-number="2" class="anchored" data-anchor-id="learning-gradcam"><span class="header-section-number">2</span> Learning GradCAM</h2>
<p>I use this package: <a href="https://github.com/jacobgil/pytorch-grad-cam">pytorch-grad-cam</a></p>
<p>Then I check how to GradCAM an image with my model and here’s how I do it:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="co" style="color: #5E5E5E;"># 1. Init model</span></span>
<span id="cb1-2">model <span class="op" style="color: #5E5E5E;">=</span> resnet50(pretrained<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>) </span>
<span id="cb1-3"><span class="co" style="color: #5E5E5E;"># 2. Set target layers (Check which layers to use from its repo)</span></span>
<span id="cb1-4"><span class="co" style="color: #5E5E5E;"># PES uses Resnet18 as its backbone. I check the model structure by:</span></span>
<span id="cb1-5"><span class="bu" style="color: null;">print</span>(model) </span>
<span id="cb1-6"><span class="co" style="color: #5E5E5E;"># Then I target at the last layer of my model, which is layer4[-1]:</span></span>
<span id="cb1-7">target_layers <span class="op" style="color: #5E5E5E;">=</span> [model.layer4[<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>]]</span>
<span id="cb1-8"><span class="co" style="color: #5E5E5E;"># 3. Create CAM object</span></span>
<span id="cb1-9">cam <span class="op" style="color: #5E5E5E;">=</span> GradCAM(model<span class="op" style="color: #5E5E5E;">=</span>model, target_layers<span class="op" style="color: #5E5E5E;">=</span>target_layers, use_cuda<span class="op" style="color: #5E5E5E;">=</span>args.use_cuda)</span>
<span id="cb1-10"><span class="co" style="color: #5E5E5E;"># 4. Set target class to GradCAM</span></span>
<span id="cb1-11"><span class="co" style="color: #5E5E5E;"># Set the 281-th class to visualize:</span></span>
<span id="cb1-12">targets <span class="op" style="color: #5E5E5E;">=</span> [ClassifierOutputTarget(<span class="dv" style="color: #AD0000;">281</span>)]</span>
<span id="cb1-13"><span class="co" style="color: #5E5E5E;"># or Set the class that has highest score to visualize:</span></span>
<span id="cb1-14">targets <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">None</span></span>
<span id="cb1-15"><span class="co" style="color: #5E5E5E;"># 5. Get your GradCAM</span></span>
<span id="cb1-16">grayscale_cam <span class="op" style="color: #5E5E5E;">=</span> cam(input_tensor<span class="op" style="color: #5E5E5E;">=</span>input_tensor, targets<span class="op" style="color: #5E5E5E;">=</span>targets)</span>
<span id="cb1-17"><span class="co" style="color: #5E5E5E;"># 6. Load the image to visualize</span></span>
<span id="cb1-18">rgb_img <span class="op" style="color: #5E5E5E;">=</span> Image.<span class="bu" style="color: null;">open</span>(<span class="ss" style="color: #20794D;">f"</span><span class="sc" style="color: #5E5E5E;">{</span>path<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span>) <span class="co" style="color: #5E5E5E;"># your image path</span></span>
<span id="cb1-19">images <span class="op" style="color: #5E5E5E;">=</span> transform_test(rgb_img).unsqueeze(<span class="dv" style="color: #AD0000;">0</span>) <span class="co" style="color: #5E5E5E;"># how you transform your image during training, see PES repo</span></span>
<span id="cb1-20">images <span class="op" style="color: #5E5E5E;">=</span> images.cuda()</span>
<span id="cb1-21"><span class="co" style="color: #5E5E5E;"># 7. GradCAM on 1 image:</span></span>
<span id="cb1-22">grayscale_cam <span class="op" style="color: #5E5E5E;">=</span> grayscale_cam[<span class="dv" style="color: #AD0000;">0</span>, :] </span>
<span id="cb1-23">visualization <span class="op" style="color: #5E5E5E;">=</span> show_cam_on_image(rgb_img, grayscale_cam, use_rgb<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb1-24"><span class="co" style="color: #5E5E5E;"># 8. Visualization:</span></span>
<span id="cb1-25">input_images <span class="op" style="color: #5E5E5E;">=</span> asarray(rgb_img)</span>
<span id="cb1-26">input_images <span class="op" style="color: #5E5E5E;">=</span> np.float32(input_images) <span class="op" style="color: #5E5E5E;">/</span> <span class="dv" style="color: #AD0000;">255</span></span>
<span id="cb1-27">visualization <span class="op" style="color: #5E5E5E;">=</span> show_cam_on_image(input_images, grayscale_cam, use_rgb<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span></code></pre></div>
</section>
<section id="make-the-gradcam-image-clearer-with-super-resolution" class="level2" data-number="3">
<h2 data-number="3" class="anchored" data-anchor-id="make-the-gradcam-image-clearer-with-super-resolution"><span class="header-section-number">3</span> Make the GradCAM image clearer with Super-Resolution</h2>
<p>The main thing to do is to find a SOTA Super-Resolution method that assist fast inference or evaluation on my image.</p>
<p>That’s why I use this model and its pretrained weights from github:</p>
<p><a href="https://github.com/csxmli2016/ReDegNet">From Face to Natural Image: Learning Real Degradation for Blind Image Super-Resolution (ECCV 2022)</a></p>
<p>All I need to do is to change the path to the inference image with my image, and rerun the inference code.</p>
<p>Then the blurring image becomes clear.</p>
</section>
<section id="deploy-all-via-flask" class="level2" data-number="4">
<h2 data-number="4" class="anchored" data-anchor-id="deploy-all-via-flask"><span class="header-section-number">4</span> Deploy all via Flask</h2>
<p>I check out this repo and figure out how to write flask code.</p>
<p><a href="https://github.com/evmaki/ee461-react-flask-heroku">React/Flask Starter App on Heroku</a></p>
<p>Here is a sample code to create a flask app on Server: <code>123.45.67.8:5005</code>:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;">from</span> flask <span class="im" style="color: #00769E;">import</span> Flask, request, send_file</span>
<span id="cb2-2">app <span class="op" style="color: #5E5E5E;">=</span> Flask(<span class="va" style="color: #111111;">__name__</span>)  <span class="co" style="color: #5E5E5E;"># 固定写法</span></span>
<span id="cb2-3">app.config[<span class="st" style="color: #20794D;">"UPLOAD_FOLDER"</span>] <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"xxx"</span> <span class="co" style="color: #5E5E5E;">#设置环境变量</span></span>
<span id="cb2-4"><span class="at" style="color: #657422;">@app.route</span>(<span class="st" style="color: #20794D;">"/predict"</span>, methods<span class="op" style="color: #5E5E5E;">=</span>[<span class="st" style="color: #20794D;">"GET"</span>, <span class="st" style="color: #20794D;">"POST"</span>])</span>
<span id="cb2-5"><span class="kw" style="color: #003B4F;">def</span> predict():</span>
<span id="cb2-6">    <span class="cf" style="color: #003B4F;">if</span> request.method <span class="op" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"POST"</span>:  <span class="co" style="color: #5E5E5E;"># 接收传输的图片</span></span>
<span id="cb2-7">        image_file <span class="op" style="color: #5E5E5E;">=</span> request.files[<span class="st" style="color: #20794D;">"file"</span>]</span>
<span id="cb2-8">        file_path <span class="op" style="color: #5E5E5E;">=</span> os.path.join(app.config[<span class="st" style="color: #20794D;">"UPLOAD_FOLDER"</span>], image_file.filename)</span>
<span id="cb2-9">        image_file.save(file_path)</span>
<span id="cb2-10">    <span class="cf" style="color: #003B4F;">else</span>:</span>
<span id="cb2-11">        file_path <span class="op" style="color: #5E5E5E;">=</span> request.args.get(<span class="st" style="color: #20794D;">"path"</span>)  <span class="co" style="color: #5E5E5E;"># 接收其他客户端浏览器发送的请求</span></span>
<span id="cb2-12">    <span class="cf" style="color: #003B4F;">return</span> gradcam(file_path)</span>
<span id="cb2-13"></span>
<span id="cb2-14"></span>
<span id="cb2-15"><span class="cf" style="color: #003B4F;">if</span> <span class="va" style="color: #111111;">__name__</span> <span class="op" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"__main__"</span>:</span>
<span id="cb2-16">    <span class="co" style="color: #5E5E5E;"># app.run() # 原工程的写法，默认只能本机访问</span></span>
<span id="cb2-17">    app.run(host<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"0.0.0.0"</span>, port<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">5005</span>)  <span class="co" style="color: #5E5E5E;"># 使其他主机可以访问服务</span></span></code></pre></div>
<p>Then run <code>python xxx.py</code> to create flask app on server.</p>
<p>Now, you can call GradCAM and Super-Resolution on another machine through command line:</p>
<ol type="1">
<li>Send your image to server and get the processed image</li>
</ol>
<p>Here, -F is to send the original file and –output is to get the processed file sent back from server.</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb3-1"><span class="ex" style="color: null;">curl</span> <span class="at" style="color: #657422;">-X</span> POST <span class="at" style="color: #657422;">-F</span> <span class="st" style="color: #20794D;">'file=@imagepath'</span> <span class="at" style="color: #657422;">--output</span> <span class="st" style="color: #20794D;">'test.jpg'</span> http://123.45.67.8:5005/predict</span></code></pre></div>
<ol start="2" type="1">
<li>Send a request from web browser while image stored in the server</li>
</ol>
<p>Note that <code>predict</code> corresponds to <code>@app.route("/predict", methods=["GET", "POST"])</code>.</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb4-1"><span class="ex" style="color: null;">http://123.45.67.8:5005/predict?path=imagepath</span></span></code></pre></div>
</section>
<section id="experiment-results" class="level2" data-number="5">
<h2 data-number="5" class="anchored" data-anchor-id="experiment-results"><span class="header-section-number">5</span> Experiment Results</h2>
<p>We conduct three experiments under symmetric, pairflip and instance noise scenarios.</p>
<table class="table">
<thead>
<tr class="header">
<th>Method</th>
<th>Symmetric</th>
<th>Pairflip</th>
<th>Instance</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>PES</td>
<td>84.44</td>
<td>85.71</td>
<td>83.66</td>
</tr>
</tbody>
</table>
</section>
<section id="linux-tricks" class="level2" data-number="6">
<h2 data-number="6" class="anchored" data-anchor-id="linux-tricks"><span class="header-section-number">6</span> Linux Tricks</h2>
<p>In this section, I will introduce some linux tricks in my project.</p>
<section id="how-to-copy-a-file-to-a-remote-server-in-python" class="level3" data-number="6.1">
<h3 data-number="6.1" class="anchored" data-anchor-id="how-to-copy-a-file-to-a-remote-server-in-python"><span class="header-section-number">6.1</span> How to copy a file to a remote server in Python?</h3>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="im" style="color: #00769E;">import</span> subprocess</span>
<span id="cb5-2">p <span class="op" style="color: #5E5E5E;">=</span> subprocess.Popen([<span class="st" style="color: #20794D;">"scp"</span>, <span class="st" style="color: #20794D;">"my_file.txt"</span>, <span class="st" style="color: #20794D;">"username@server:path"</span>])</span>
<span id="cb5-3">sts <span class="op" style="color: #5E5E5E;">=</span> os.waitpid(p.pid, <span class="dv" style="color: #AD0000;">0</span>)</span></code></pre></div>
</section>
<section id="how-to-run-scp-without-password-prompt-interruption-in-linux" class="level3" data-number="6.2">
<h3 data-number="6.2" class="anchored" data-anchor-id="how-to-run-scp-without-password-prompt-interruption-in-linux"><span class="header-section-number">6.2</span> How to Run SCP Without Password Prompt Interruption in Linux?</h3>
<p>Try this if you wanna improve the speed of transferring the files.</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb6-1"><span class="fu" style="color: #4758AB;">ssh-keygen</span> <span class="at" style="color: #657422;">-t</span> rsa <span class="at" style="color: #657422;">-b</span> 4096 <span class="at" style="color: #657422;">-C</span> <span class="st" style="color: #20794D;">"root@localhost"</span></span></code></pre></div>
<p>Then, it says <code>Enter file in which to save the key (/root/.ssh/id_rsa):</code>. Copy the saving path here(.ssh/) and check if the key <code>id_rsa.pub</code> is there.</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb7-1"><span class="fu" style="color: #4758AB;">ls</span> <span class="at" style="color: #657422;">-l</span> .ssh/</span></code></pre></div>
<p>Finally, do this, remember to replace .ssh with your saving path.</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb8-1"><span class="fu" style="color: #4758AB;">cat</span> .ssh/id_rsa.pub <span class="kw" style="color: #003B4F;">|</span> <span class="fu" style="color: #4758AB;">ssh</span> root@server2 <span class="st" style="color: #20794D;">'cat &gt;&gt; .ssh/authorized_keys'</span></span></code></pre></div>
</section>
<section id="how-to-run-linux-command-in-python" class="level3" data-number="6.3">
<h3 data-number="6.3" class="anchored" data-anchor-id="how-to-run-linux-command-in-python"><span class="header-section-number">6.3</span> How to run linux command in python?</h3>
<p>I need to move and save my file in python. Here’s how I do it:</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="im" style="color: #00769E;">import</span> os</span>
<span id="cb9-2">os.system(<span class="st" style="color: #20794D;">"touch a.txt"</span>) <span class="co" style="color: #5E5E5E;"># single command</span></span>
<span id="cb9-3">os.system(<span class="st" style="color: #20794D;">"touch a.txt &amp;&amp; touch b.txt"</span>) <span class="co" style="color: #5E5E5E;"># multiple command</span></span></code></pre></div>
<p>Otherwise, save the commands to a .sh file and run it.</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="im" style="color: #00769E;">import</span> os</span>
<span id="cb10-2">os.system(<span class="st" style="color: #20794D;">"save.sh"</span>)</span></code></pre></div>
</section>
<section id="how-to-copy-a-file-or-directory-in-linux" class="level3" data-number="6.4">
<h3 data-number="6.4" class="anchored" data-anchor-id="how-to-copy-a-file-or-directory-in-linux"><span class="header-section-number">6.4</span> How to copy a file or directory in linux?</h3>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb11-1"><span class="fu" style="color: #4758AB;">cp</span> <span class="op" style="color: #5E5E5E;">&lt;</span>existing file name<span class="op" style="color: #5E5E5E;">&gt;</span> <span class="op" style="color: #5E5E5E;">&lt;</span>new file name<span class="op" style="color: #5E5E5E;">&gt;</span>  </span>
<span id="cb11-2"><span class="fu" style="color: #4758AB;">cp</span> <span class="op" style="color: #5E5E5E;">&lt;</span>file1<span class="op" style="color: #5E5E5E;">&gt;</span> <span class="op" style="color: #5E5E5E;">&lt;</span>file2<span class="op" style="color: #5E5E5E;">&gt;</span> <span class="op" style="color: #5E5E5E;">&lt;</span>target_directory_name<span class="op" style="color: #5E5E5E;">&gt;</span></span>
<span id="cb11-3"><span class="fu" style="color: #4758AB;">cp</span> <span class="at" style="color: #657422;">-r</span> <span class="op" style="color: #5E5E5E;">&lt;</span>dir1<span class="op" style="color: #5E5E5E;">&gt;</span> <span class="op" style="color: #5E5E5E;">&lt;</span>dir2<span class="op" style="color: #5E5E5E;">&gt;</span></span></code></pre></div>
</section>
</section>
<section id="github-tricks" class="level2" data-number="7">
<h2 data-number="7" class="anchored" data-anchor-id="github-tricks"><span class="header-section-number">7</span> Github Tricks</h2>
<section id="how-to-search-efficiently" class="level3" data-number="7.1">
<h3 data-number="7.1" class="anchored" data-anchor-id="how-to-search-efficiently"><span class="header-section-number">7.1</span> How to search efficiently?</h3>
<p>I often find latest updates in my field like this:</p>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb12-1"><span class="ex" style="color: null;">deep</span> learning stars:<span class="op" style="color: #5E5E5E;">&gt;</span>10 forks:<span class="op" style="color: #5E5E5E;">&gt;</span>10 language:python created:<span class="op" style="color: #5E5E5E;">&gt;</span>2022-01-01 pushed:<span class="op" style="color: #5E5E5E;">&gt;</span>2022-01-01</span></code></pre></div>
<p>Here, deep learning is the search tag.</p>
</section>
</section>
<section id="references" class="level2" data-number="8">
<h2 data-number="8" class="anchored" data-anchor-id="references"><span class="header-section-number">8</span> References</h2>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb13-1"><span class="co" style="color: #5E5E5E;"># https://www.tutorialspoint.com/How-to-copy-a-file-to-a-remote-server-in-Python-using-SCP-or-SSH</span></span>
<span id="cb13-2"><span class="co" style="color: #5E5E5E;"># superweb999.com/article/356190.html #</span></span>
<span id="cb13-3"><span class="co" style="color: #5E5E5E;"># https://cloud.tencent.com/developer/article/1669557 #</span></span>
<span id="cb13-4"><span class="co" style="color: #5E5E5E;"># https://blog.theodo.com/2022/05/upgrade-pytorch-for-aws-sagemaker/ # </span></span>
<span id="cb13-5"><span class="co" style="color: #5E5E5E;"># https://www.thegeekdiary.com/how-to-run-scp-without-password-prompt-interruption-in-linux/ #</span></span>
<span id="cb13-6"><span class="co" style="color: #5E5E5E;"># https://flask.palletsprojects.com/en/2.2.x/patterns/fileuploads/  </span></span>
<span id="cb13-7"><span class="co" style="color: #5E5E5E;"># https://blog.csdn.net/qq_27825451/article/details/102909772 #</span></span>
<span id="cb13-8"><span class="co" style="color: #5E5E5E;"># https://blog.csdn.net/xiojing825/article/details/78207862 #</span></span>
<span id="cb13-9"><span class="co" style="color: #5E5E5E;"># https://github.com/csxmli2016/ReDegNet</span></span>
<span id="cb13-10"><span class="co" style="color: #5E5E5E;"># https://learnku.com/server/wikis/36530 #</span></span>
<span id="cb13-11"><span class="co" style="color: #5E5E5E;"># https://www.csdn.net/tags/OtDaUg1sODA3MDMtYmxvZwO0O0OO0O0O.html #</span></span>
<span id="cb13-12"><span class="co" style="color: #5E5E5E;"># https://blog.duhbb.com/2022/03/29/local-web-access-by-frp-intranet-penetration/</span></span>
<span id="cb13-13"><span class="co" style="color: #5E5E5E;"># https://github.com/evmaki/ee461-react-flask-heroku</span></span>
<span id="cb13-14"><span class="co" style="color: #5E5E5E;"># https://www.freecodecamp.org/news/how-to-update-node-and-npm-to-the-latest-version/</span></span>
<span id="cb13-15"><span class="co" style="color: #5E5E5E;"># https://github.com/Nneji123/Serving-Machine-Learning-Models#serving-models-with-streamlit</span></span>
<span id="cb13-16"><span class="co" style="color: #5E5E5E;"># https://github.com/neelsomani/react-flask-heroku</span></span>
<span id="cb13-17"><span class="co" style="color: #5E5E5E;"># https://towardsdatascience.com/reactjs-python-flask-on-heroku-2a308272886a</span></span>
<span id="cb13-18"><span class="co" style="color: #5E5E5E;"># https://www.google.com/search?q=gunicorn+app:app&amp;sxsrf=ALiCzsbTbNZ0bN6WspDglqqEscn7xPL9Mw:1668792432324&amp;ei=cMB3Y8uwE9Pw4-EP8q6syAI&amp;start=10&amp;sa=N&amp;ved=2ahUKEwjLqIehoLj7AhVT-DgGHXIXCykQ8NMDegQIAxAO</span></span>
<span id="cb13-19"><span class="co" style="color: #5E5E5E;"># https://www.geeksforgeeks.org/how-to-display-multiple-images-in-one-figure-correctly-in-matplotlib/</span></span></code></pre></div>


</section>

 ]]></description>
  <category>python</category>
  <category>pytorch</category>
  <category>deep learning</category>
  <category>tutorial</category>
  <guid>https://waterking.cc/posts/tutorials/2022-11-19-ai-project/ai-course-project.html</guid>
  <pubDate>Fri, 18 Nov 2022 16:00:00 GMT</pubDate>
  <media:content url="https://waterking.cc/posts/tutorials/2022-11-19-ai-project/test.jpg" medium="image" type="image/jpeg"/>
</item>
</channel>
</rss>
